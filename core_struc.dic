##############################################################################
#                                                                            #
#                      CIF CORE STRUCTURE DICTIONARY                         #
#                                                                            #
##############################################################################
 
data_CORE_STRUC
 
    _dictionary.title            CORE_STRUC
    _dictionary.class            Instance
    _dictionary.version          1.4.10 
    _dictionary.date             2013-02-18
    _dictionary.uri              www.iucr.org/cif/dic/core_struc.dic
    _dictionary.ddl_conformance  3.10.03
    _dictionary.namespace        CoreStruc
    _description.text
;
     This dictionary contains the definitions of data items that
     are considered CORE to the description of STRUCTURE data.  
;
 

save_STRUCTURE
    _definition.id               STRUCTURE
    _definition.scope            Category
    _definition.class            Head
    _definition.update           2012-11-20
    _description.text
;
    The DICTIONARY group encompassing the CORE STRUCTURE data items defined 
    and used with in the Crystallographic Information Framework (CIF).
;
    _name.category_id            CIF_CORE
    _name.object_id              STRUCTURE

#===========================================================================
 
save_ATOM
 
    _definition.id               ATOM
    _definition.scope            Category
    _definition.class            Set 
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to describe atomic information
     used in crystallographic structure studies.
;
    _description.common         'Atom'
    _name.category_id            STRUCTURE
    _name.object_id              ATOM
 
 
#===========================================================================
 
save_ATOM_SITE
 
    _definition.id               ATOM_SITE
    _definition.scope            Category
    _definition.class            Loop
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to describe atom site information
     used in crystallographic structure studies.
;
    _description.common         'AtomSiteList'
    _name.category_id            ATOM
    _name.object_id              SITE
    _category.key_id           '_atom_site.key'
 
 
save_atom_site.key
    _definition.id             '_atom_site.key'
    _definition.update           2012-11-20
    _description.text
;
     Value is a unique key to a set of ATOM_SITE items
     in a looped list.
;
    _description.common         'Key to list of atomic sites'
    _name.category_id            site
    _name.object_id              key
    _type.purpose                Key
    _type.source                 Assembled
    _type.container              Single
    loop_
    _method.purpose
    _method.expression
     Definition
;              _type.contents = Type_Contents(atom_site.label)
;
     Evaluation
;              _atom_site.key = _atom_site.label
;
     save_


save_atom_site.adp_type
    _definition.id             '_atom_site.adp_type'
     loop_ 
    _alias.definition_id       '_atom_site_adp_type'
                               '_atom_site_thermal_displace_type'
                               '_atom_site.thermal_displace_type'
    _definition.update           2012-11-20
    _description.text
;
     Code for type of atomic displacement parameters used for the site.
;
    _description.common         'AtomSiteAdpType'
    _name.category_id            site
    _name.object_id              adp_type
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_ 
    _enumeration_set.state
    _enumeration_set.detail      Uani   'anisotropic Uij'
                                 Uiso   'isotropic U'
                                 Uovl   'overall U'
                                 Umpe   'multipole expansion U'
                                 Bani   'anisotropic Bij'
                                 Biso   'isotropic B'
                                 Bovl   'overall B'
    _enumeration.default         Uiso
     save_
 
 
save_atom_site.attached_hydrogens
    _definition.id             '_atom_site.attached_hydrogens'
     loop_
    _alias.definition_id       '_atom_site_attached_hydrogens'
    _definition.update           2012-11-20
    _description.text
;
     Number of hydrogen atoms attached to the atom at this site
     excluding any H atoms for which coordinates (measured or calculated)
     are given.
;
    _description.common         'AtomSiteAttachedH'
    _name.category_id            site
    _name.object_id              attached_hydrogens
    _type.purpose                Quantity
    _type.source                 Observed
    _type.container              Single
    _type.contents               Count
    _enumeration.range           0:8
    _enumeration.default         0
     loop_
    _description_example.case
    _description_example.detail  2    'water oxygen'
                                 1    'hydroxyl oxygen'
                                 4    'ammonium nitrogen'
     save_
 
 
save_atom_site.B_equiv_geom_mean
    _definition.id             '_atom_site.B_equiv_geom_mean'
     loop_
    _alias.definition_id       '_atom_site_B_equiv_geom_mean'
    _definition.update           2012-11-20
    _description.text
;
     Equivalent isotropic atomic displacement parameter, B(equiv),
     in angstroms squared, calculated as the geometric mean of
     the anisotropic atomic displacement parameters.
 
                 B(equiv) = (B~i~ B~j~ B~k~)^1/3^
 
     B~n~  = the principal components of the orthogonalised B^ij^
 
     The IUCr Commission on Nomenclature recommends against the use
     of B for reporting atomic displacement parameters. U, being
     directly proportional to B, is preferred.
;
    _description.common         'AtomSiteBisoMean'
    _name.category_id            site
    _name.object_id              B_equiv_geom_mean
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms_squared
     save_
 
 
save_atom_site.B_iso_or_equiv
    _definition.id             '_atom_site.B_iso_or_equiv'
     loop_
    _alias.definition_id       '_atom_site_B_iso_or_equiv'
    _definition.update           2012-11-20
    _description.text
;
     Isotropic atomic displacement parameter, or equivalent isotropic
     atomic displacement parameter, B(equiv), in angstroms squared,
     calculated from anisotropic temperature factor parameters.
 
         B(equiv) = (1/3) sum~i~[sum~j~(B^ij^ a*~i~ a*~j~ a~i~ a~j~)]
 
     a     = the real-space cell lengths
     a*    = the reciprocal-space cell lengths
     B^ij^ = 8 pi^2^ U^ij^
     Ref: Fischer, R. X. & Tillmanns, E. (1988). Acta Cryst. C44, 775-776.
 
     The IUCr Commission on Nomenclature recommends against the use
     of B for reporting atomic displacement parameters. U, being
     directly proportional to B, is preferred.
;
    _description.common         'AtomSiteBisoEquiv'
    _name.category_id            site
    _name.object_id              B_iso_or_equiv
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms_squared
     save_
 
 
save_atom_site.calc_attached_atom
    _definition.id             '_atom_site.calc_attached_atom'
     loop_
    _alias.definition_id       '_atom_site_calc_attached_atom'
    _definition.update           2012-11-20
    _description.text
;
     The _atom_site.label of the atom site to which the 'geometry-
     calculated' atom site is attached.
;
    _description.common         'AtomSiteParentAtom'
    _name.category_id            site
    _name.object_id              calc_attached_atom
    _name.linked_item_id       '_atom_site.label'
    _type.purpose                Link
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     save_
 
 
save_atom_site.calc_flag
    _definition.id             '_atom_site.calc_flag'
     loop_
    _alias.definition_id       '_atom_site_calc_flag'
    _definition.update           2012-11-20
    _description.text
;
     A standard code to signal if the site coordinates have been
     determined from the intensities or calculated from the geometry
     of surrounding sites, or have been assigned dummy coordinates.
;
    _description.common         'AtomSiteCalcStatus'
    _name.category_id            site
    _name.object_id              calc_flag
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail   d    'determined from diffraction measurements'
                              calc 'calculated from molecular geometry'
                              c    'abbreviation for "calc"'
                              dum  'dummy site with meaningless coordinates'
    _enumeration.default      d
     save_
 
 
save_atom_site.Cartn_xyz
    _definition.id             '_atom_site.Cartn_xyz'
    _definition.update           2012-11-20
    _description.text
;
     Vector of Cartesian (orthogonal angstrom) atom site coordinates.
;
    _description.common         'AtomSiteCartnXyz'
    _name.category_id            site
    _name.object_id              Cartn_xyz
    _type.purpose                Measurand
    _type.source                 Assembled
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3]
     loop_
    _method.purpose
    _method.expression
     Evaluation     
;
    With a  as  atom_site

    _atom_site.Cartn_xyz =   [a.Cartn_x, a.Cartn_y, a.Cartn_z] 
;
     save_
 
 
save_atom_site.Cartn_x
    _definition.id             '_atom_site.Cartn_x'
     loop_
    _alias.definition_id       '_atom_site_Cartn_x'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_coord'}]
    _name.category_id            site
    _name.object_id              Cartn_x
     save_
 
 
save_atom_site.Cartn_y
    _definition.id             '_atom_site.Cartn_y'
     loop_
    _alias.definition_id       '_atom_site_Cartn_y'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_coord'}]
    _name.category_id            site
    _name.object_id              Cartn_y
     save_
 
 
save_atom_site.Cartn_z
    _definition.id             '_atom_site.Cartn_z'
     loop_
    _alias.definition_id       '_atom_site_Cartn_z'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_coord'}]
    _name.category_id            site
    _name.object_id              Cartn_z
     save_
 
 
save_atom_site.chemical_conn_number
    _definition.id             '_atom_site.chemical_conn_number'
     loop_
    _alias.definition_id       '_atom_site_chemical_conn_number'
    _definition.update           2012-11-20
    _description.text
;
     This number links an atom site to the chemical connectivity list.
     It must match a number specified by _chemical_conn_atom.number.
;
    _description.common         'AtomSiteChemConnLink'
    _name.category_id            site
    _name.object_id              chemical_conn_number
    _name.linked_item_id       '_chemical_conn_atom.number'
    _type.purpose                Link
    _type.source                 Selected
    _type.container              Single
    _type.contents               Index
    _enumeration.range           1:
     save_
 
 
save_atom_site.constraints
    _definition.id             '_atom_site.constraints'
     loop_
    _alias.definition_id       '_atom_site_constraints'
    _definition.update           2012-11-20
    _description.text
;
     A description of the constraints applied to parameters at this
     site during refinement. See also _atom_site.refinement_flags
     and _refine_ls.number_constraints.
;
    _description.common         'AtomSiteConstraints'
    _name.category_id            site
    _name.object_id              constraints
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case    'pop=1.0-pop(Zn3)'
     save_
 
 
save_atom_site.description
    _definition.id             '_atom_site.description'
     loop_
    _alias.definition_id       '_atom_site_description'
                               '_atom_site.details'
    _definition.update           2012-11-20
    _description.text
;
     A description of special aspects of this site. See also
     _atom_site.refinement_flags.
;
    _description.common         'AtomSiteDetails'
    _name.category_id            site
    _name.object_id              description
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case   'Ag/Si disordered'
     save_
 
 
save_atom_site.disorder_assembly
    _definition.id             '_atom_site.disorder_assembly'
     loop_
    _alias.definition_id       '_atom_site_disorder_assembly'
    _definition.update           2012-11-20
    _description.text
;
     A code which identifies a cluster of atoms that show long range
     positional disorder but are locally ordered. Within each such
     cluster of atoms, _atom_site.disorder_group is used to identify
     the sites that are simultaneously occupied. This field is only
     needed if there is more than one cluster of disordered atoms
     showing independent local order.
;
    _description.common         'AtomSiteDisorderCode'
    _name.category_id            site
    _name.object_id              disorder_assembly
    _type.purpose                Quantity
    _type.source                 Selected
    _type.container              Single
    _type.contents               Code
     loop_
    _description_example.case
    _description_example.detail
               A  'disordered methyl assembly with groups 1 and 2'
               B  'disordered sites related by a mirror'
               S  'disordered sites independent of symmetry'
     save_
 
 
save_atom_site.disorder_group
    _definition.id             '_atom_site.disorder_group'
     loop_
    _alias.definition_id       '_atom_site_disorder_group'
    _definition.update           2012-11-20
    _description.text
;
     A code that identifies a group of positionally disordered atom
     sites that are locally simultaneously occupied. Atoms that are
     positionally disordered over two or more sites (e.g. the H
     atoms of a methyl group that exists in two orientations) can
     be assigned to two or more groups. Sites belonging to the same
     group are simultaneously occupied, but those belonging to
     different groups are not. A minus prefix (e.g. "-1") is used to
     indicate sites disordered about a special position.
;
    _description.common         'AtomSiteDisorderGroup'
    _name.category_id            site
    _name.object_id              disorder_group
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _description_example.case
    _description_example.detail
               1  'unique disordered site in group 1' 
               2  'unique disordered site in group 2'
              -1  'symmetry-independent disordered site'
     save_
 
 
save_atom_site.fract_xyz
 
    _definition.id             '_atom_site.fract_xyz'
    _definition.update           2012-11-20
    _description.text
;
     Vector of atom site coordinates projected onto the crystal unit
     cell as fractions of the cell lengths.
;
    _description.common         'AtomSiteFractXyz'
    _name.category_id            site
    _name.object_id              fract_xyz
    _type.purpose                Measurand
    _type.source                 Assembled
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3]
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     With a  as  atom_site
 
     atom_site.fract_xyz =  [a.fract_x, a.fract_y, a.fract_z]
;
     save_
 
 
save_atom_site.fract_x
    _definition.id             '_atom_site.fract_x'
     loop_
    _alias.definition_id       '_atom_site_fract_x'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_coord'}]
    _name.category_id            site
    _name.object_id              fract_x
     save_
 
 
save_atom_site.fract_y
    _definition.id             '_atom_site.fract_y'
     loop_
    _alias.definition_id       '_atom_site_fract_y'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_coord'}]
    _name.category_id            site
    _name.object_id              fract_y
     save_
 
 
save_atom_site.fract_z
    _definition.id             '_atom_site.fract_z'
     loop_
    _alias.definition_id       '_atom_site_fract_z'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_coord'}]
    _name.category_id            site
    _name.object_id              fract_z
     save_
 
 
save_atom_site.label
    _definition.id             '_atom_site.label'
     loop_
    _alias.definition_id       '_atom_site_label'
    _import.get         [{"file":'templ_attr.cif',"save":'atom_site_label'}]
    _description.common         'AtomSiteLabel'
    _name.category_id            site
    _name.object_id              label
     save_
 
 
save_atom_site.label_component_0
    _definition.id             '_atom_site.label_component_0'
     loop_
    _alias.definition_id       '_atom_site_label_component_0'
    _import.get         [{"file":'templ_attr.cif',"save":'label_component'}]
    _name.category_id            site
    _name.object_id              label_component_0
     save_
 
 
save_atom_site.label_component_1
    _definition.id             '_atom_site.label_component_1'
     loop_
    _alias.definition_id       '_atom_site_label_component_1'
    _import.get         [{"file":'templ_attr.cif',"save":'label_component'}]
    _name.category_id            site
    _name.object_id              label_component_1
     save_
 
 
save_atom_site.label_component_2
    _definition.id             '_atom_site.label_component_2'
     loop_
    _alias.definition_id       '_atom_site_label_component_2'
    _import.get         [{"file":'templ_attr.cif',"save":'label_component'}]
    _name.category_id            site
    _name.object_id              label_component_2
     save_
 
 
save_atom_site.label_component_3
    _definition.id             '_atom_site.label_component_3'
     loop_
    _alias.definition_id       '_atom_site_label_component_3'
    _import.get         [{"file":'templ_attr.cif',"save":'label_component'}]
    _name.category_id            site
    _name.object_id              label_component_3
     save_
 
 
save_atom_site.label_component_4
    _definition.id             '_atom_site.label_component_4'
     loop_
    _alias.definition_id       '_atom_site_label_component_4'
    _import.get         [{"file":'templ_attr.cif',"save":'label_component'}]
    _name.category_id            site
    _name.object_id              label_component_4
     save_
 
 
save_atom_site.label_component_5
    _definition.id             '_atom_site.label_component_5'
     loop_
    _alias.definition_id       '_atom_site_label_component_5'
    _import.get         [{"file":'templ_attr.cif',"save":'label_component'}]
    _name.category_id            site
    _name.object_id              label_component_5
     save_
 
 
save_atom_site.label_component_6
    _definition.id             '_atom_site.label_component_6'
     loop_
    _alias.definition_id       '_atom_site_label_component_6'
    _import.get         [{"file":'templ_attr.cif',"save":'label_component'}]
    _name.category_id            site
    _name.object_id              label_component_6
     save_
 
 
save_atom_site.occupancy
    _definition.id             '_atom_site.occupancy'
     loop_
    _alias.definition_id       '_atom_site_occupancy'
    _definition.update           2012-11-20
    _description.text
;
     The fraction of the atom type present at this site.
     The sum of the occupancies of all the atom types at this site
     may not significantly exceed 1.0 unless it is a dummy site. The
     value must lie in the 99.97% Gaussian confidence interval
     -3u =< x =< 1 + 3u. The _enumeration.range of 0.0:1.0 is thus
     correctly interpreted as meaning (0.0 - 3u) =< x =< (1.0 + 3u).
;
    _description.common         'AtomSiteOccupancy'
    _name.category_id            site
    _name.object_id              occupancy
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:1.0
    _enumeration.default         1.0
     save_
 
 
save_atom_site.refinement_flags
    _definition.id             '_atom_site.refinement_flags'
     loop_
    _alias.definition_id       '_atom_site_refinement_flags'
    _definition.update           2012-11-20
    _description.text
;
     A concatenated series of single-letter codes which indicate the
     refinement restraints or constraints applied to this site.
;
    _description.common         'AtomSiteRefineFlags'
    _name.category_id            site
    _name.object_id              refinement_flags
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail 
                   S  'special position constraint on site'
                   G  'rigid group refinement of site'
                   R  'riding-atom site attached to non-riding atom'
                   D  'distance or angle restraint on site'
                   T  'thermal displacement constraints'
                   U  'Uiso or Uij restraint (rigid bond)'
                   P  'partial occupancy constraint'
                   .  'no refinement constraints'        
     save_
 

save_atom_site.refinement_flags_adp
    _definition.id             '_atom_site.refinement_flags_adp'
     loop_
    _alias.definition_id       '_atom_site_refinement_flags_adp'
    _definition.update           2012-11-20
    _description.text
;
     A code which indicates the refinement restraints or constraints 
     applied to the atomic displacement parameters of this site.
;
    _name.category_id            site
    _name.object_id              refinement_flags_adp
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail
     .  'no constraints on atomic displacement parameters'
     T  'special-position constraints on atomic displacement parameters'
     U  'Uiso or Uij restraint (rigid bond)'
     TU 'both constraints applied'
     save_


save_atom_site.refinement_flags_occupancy
    _definition.id             '_atom_site.refinement_flags_occupancy'
     loop_
    _alias.definition_id       '_atom_site_refinement_flags_occupancy'
    _definition.update           2012-11-20
    _description.text 
;    
     A code which indicates the refinement restraints or constraints
     applied to the occupancy of this site.
;   
    _name.category_id            site
    _name.object_id              refinement_flags_occupancy
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail
     .  'no constraints on atomic displacement parameters'
     T  'special-position constraints on atomic displacement parameters'
     U  'Uiso or Uij restraint (rigid bond)'
     TU 'both constraints applied'
     save_


save_atom_site.refinement_flags_posn
    _definition.id             '_atom_site.refinement_flags_posn'
     loop_
    _alias.definition_id       '_atom_site_refinement_flags_posn'
    _definition.update           2012-11-20
    _description.text            
;   
     A code which indicates the refinement restraints or constraints      
     applied to the positional coordinates of this site.
;    
    _name.category_id            site
    _name.object_id              refinement_flags_posn
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state       
    _enumeration_set.detail      
           . 'no constraints on  positional coordinates'
           D 'distance or angle restraint on positional coordinates'
           G 'rigid-group refinement of positional coordinates'
           R 'riding-atom site attached to non-riding atom'
           S 'special-position constraint on positional coordinates'
           DG   'combination of the above constraints'
           DR   'combination of the above constraints'
           DS   'combination of the above constraints'
           GR   'combination of the above constraints'
           GS   'combination of the above constraints'
           RS    'combination of the above constraints'
           DGR  'combination of the above constraints'
           DGS  'combination of the above constraints'
           DRS  'combination of the above constraints'
           GRS  'combination of the above constraints'
           DGRS 'combination of the above constraints'
     save_

 
save_atom_site.restraints
    _definition.id             '_atom_site.restraints'
     loop_
    _alias.definition_id       '_atom_site_restraints'
    _definition.update           2012-11-20
    _description.text
;
     A description of restraints applied to specific parameters at
     this site during refinement. See also _atom_site.refinement_flags
     and _refine_ls.number_restraints.
;
    _description.common         'AtomSiteRestraints'
    _name.category_id            site
    _name.object_id              restraints
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case   'restrained to planar ring'
     save_
 
 
save_atom_site.site_symmetry_multiplicity
    _definition.id             '_atom_site.site_symmetry_multiplicity'
     loop_
    _alias.definition_id       '_atom_site_site_symmetry_multiplicity'
                               '_atom_site_symmetry_multiplicity'
    _definition.update           2012-11-20
    _description.text
;
     The number of different sites that are generated by the
     application of the space-group symmetry to the coordinates 
     given for this site. It is equal to the multiplicity given 
     for this Wyckoff site in International Tables for Cryst.
     Vol. A (2002). It is equal to the multiplicity of the general 
     position divided by the order of the site symmetry given in
     _atom_site.site_symmetry_order.
;
    _description.common         'AtomSiteMultiplicity'
    _name.category_id            site
    _name.object_id              site_symmetry_multiplicity
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Index
    _enumeration.range           1:192
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     With  a  as  atom_site  

        mul  =   1
        xyz  =   a.fract_xyz

          Loop  s  as  symmetry_equiv  {

             sxyz  =   s.R * xyz + s.T
             diff  =   Mod( 99.5 + xyz - sxyz, 1.0) - 0.5

             If ( Norm ( diff ) > 0.1 ) mul +=  1
       } 
        _atom_site.site_symmetry_multiplicity =  mul
;
     save_
 

save_atom_site.site_symmetry_order
    _definition.id             '_atom_site.site_symmetry_order'
     loop_
    _alias.definition_id       '_atom_site_site_symmetry_order'
    _definition.update           2012-11-20
    _description.text
;
    The number of times application of the crystallographic symmetry 
    to the coordinates for this site generates the same coordinates.
    That is:
            multiplicity of the general position
            ------------------------------------
            _atom_site.site_symmetry_multiplicity
;
    _description.common         'AtomSiteMultiplicity'
    _name.category_id            site
    _name.object_id              site_symmetry_order
    _type.purpose                Quantity
    _type.source                 Derived
    _type.container              Single
    _type.contents               Index
    _enumeration.range           1:48
     save_

 
save_atom_site.type_symbol
    _definition.id             '_atom_site.type_symbol'
     loop_
    _alias.definition_id       '_atom_site_type_symbol'
    _definition.update           2012-11-20
    _description.text
;
     A code to identify the atom specie(s) occupying this site.
     This code must match a corresponding _atom_type.symbol. The
     specification of this code is optional if component_0 of the
     _atom_site.label is used for this purpose. See _atom_type.symbol.
;
    _description.common         'AtomSiteTypeSymbol'
    _name.category_id            site
    _name.object_id              type_symbol
    _name.linked_item_id       '_atom_type.symbol'
    _type.purpose                Link
    _type.source                 Assembled
    _type.container              Single
    _type.contents               Code
     loop_
    _description_example.case    Cu   Cu2+    S    O1-
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
          _atom_site.type_symbol  =   AtomType ( _atom_site.label )
;
     save_
 
 
save_atom_site.U_equiv_geom_mean
    _definition.id             '_atom_site.U_equiv_geom_mean'
     loop_
    _alias.definition_id       '_atom_site_U_equiv_geom_mean'
    _definition.update           2012-11-20
    _description.text
;
     Equivalent isotropic atomic displacement parameter, U(equiv),
     in angstroms squared, calculated as the geometric mean of
     the anisotropic atomic displacement parameters.
 
                U(equiv) = (U~i~ U~j~ U~k~)^1/3^
 
     U~n~ = the principal components of the orthogonalised U^ij^
;
    _description.common         'AtomSiteUisoMean'
    _name.category_id            site
    _name.object_id              U_equiv_geom_mean
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms_squared
     save_
 
 
save_atom_site.U_iso_or_equiv
    _definition.id             '_atom_site.U_iso_or_equiv'
     loop_
    _alias.definition_id       '_atom_site_U_iso_or_equiv'
    _definition.update           2012-11-20
    _description.text
;
     Isotropic atomic displacement parameter, or equivalent isotropic
     atomic  displacement parameter, U(equiv), in angstroms squared,
     calculated from anisotropic atomic displacement  parameters.
 
        U(equiv) = (1/3) sum~i~[sum~j~(U^ij^ a*~i~ a*~j~ a~i~ a~j~)]
 
     a  = the real-space cell lengths
     a* = the reciprocal-space cell lengths
     Ref: Fischer, R. X. & Tillmanns, E. (1988). Acta Cryst. C44, 775-776.
;
    _description.common         'AtomSiteUisoEquiv'
    _name.category_id            site
    _name.object_id              U_iso_or_equiv
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms_squared
     save_
 
 
save_atom_site.Wyckoff_symbol
    _definition.id             '_atom_site.Wyckoff_symbol'
     loop_
    _alias.definition_id       '_atom_site_Wyckoff_symbol'
    _definition.update           2012-11-20
    _description.text
;
     The Wyckoff symbol (letter) as listed in the space-group section
     of International Tables for Crystallography, Vol. A (1987).
;
    _description.common         'AtomSiteWyckoff'
    _name.category_id            site
    _name.object_id              Wyckoff_symbol
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     save_

#----------------------------------------------------------------------------

 
save_ATOM_SITE_ANISO
 
    _definition.id               ATOM_SITE_ANISO
    _definition.scope            Category
    _definition.class            Loop
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to describe the anisotropic
     thermal parameters of the atomic sites in a crystal structure. 
;
    _description.common         'Anisotropic thermal parameters'
    _name.category_id            ATOM_SITE
    _name.object_id              ANISO       
    _category.key_id           '_atom_site_aniso.key'
 
 
save_atom_site_aniso.key
    _definition.id             '_atom_site_aniso.key'
    _definition.update           2012-11-20
    _description.text
;
     Value is a unique key to a set of ATOM_SITE_ANISO items
     in a looped list.
;
    _description.common         'Key to list of atomic sites'
    _name.category_id            aniso
    _name.object_id              key
    _type.purpose                Key
    _type.source                 Assembled
    _type.container              Single
    loop_
    _method.purpose
    _method.expression
     Definition
;              _type.contents = Type_Contents(atom_site_aniso.label)
;
     Evaluation
;              _atom_site_aniso.key = _atom_site_aniso.label
;
     save_
 

save_atom_site_aniso.label
    _definition.id             '_atom_site_aniso.label'
     loop_
    _alias.definition_id       '_atom_site_aniso_label'
    _definition.update           2013-01-23
    _description.text
;
     Anisotropic atomic displacement parameters are usually looped in
     a separate list. If this is the case, this code must match the
     _atom_site_label of the associated atom in the atom coordinate
     list and conform with the same rules described in _atom_site.label.
;
    _description.common         'AtomSiteAnisoLabel'
    _name.category_id            aniso
    _name.object_id              label
    _type.purpose                Quantity 
    _type.source                 Selected
    _type.container              Single
    _type.contents               Code 
     save_
 
 
save_atom_site_aniso.ratio
    _definition.id             '_atom_site_aniso.ratio'
     loop_
    _alias.definition_id       '_atom_site_aniso_ratio'
                               '_atom_site_anisotrop.ratio'
    _definition.update           2012-11-20
    _description.text
;
     Ratio of the maximum to minimum eigenvalues of the atomic
     displacement (thermal) ellipsoids.
;
    _description.common         'AtomSiteAnisoRatio'
    _name.category_id            aniso
    _name.object_id              ratio
    _type.purpose                Quantity 
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           1.0:
     save_
 
 
save_atom_site_aniso.type_symbol
    _definition.id             '_atom_site_aniso.type_symbol'
     loop_
    _alias.definition_id       '_atom_site_aniso_type_symbol'
                               '_atom_site_anisotrop.type_symbol'
    _definition.update           2012-11-20
    _description.text
;
     This _atom_type.symbol code links the anisotropic atom parameters to
     the atom type data associated with this site and must match one of
     the _atom_type.symbol codes in this list.
;
    _description.common         'AtomSiteAnisoTypeSymbol'
    _name.category_id            aniso
    _name.object_id              type_symbol
    _name.linked_item_id       '_atom_type.symbol'
    _type.purpose                Link
    _type.source                 Assembled
    _type.container              Single
    _type.contents               Code
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     _atom_site_aniso.type_symbol  =   AtomType ( _atom_site_aniso.label )
;
     save_
 
 
save_atom_site_aniso.matrix_beta
    _definition.id             '_atom_site_aniso.matrix_beta'
    _definition.update           2012-11-20
    _description.text
;
     The symmetric anisotropic atomic displacement matrix beta(IJ)
     appears in a structure factor expression as:
  
     t = exp -       ( beta11 h h + ............ 2 beta23 k l )

     It is related to the adp matrices U(IJ) and B(IJ) as follows:

     t = exp -2pi**2 ( U11    h h a* a* + ...... 2 U23    k l b* c* ) 
     t = exp - 0.25  ( B11    h h a* a* + ...... 2 B23    k l b* c* ) 
;
    _description.common         'AtomSiteAnisoBetaIJ'
    _name.category_id            aniso
    _name.object_id              matrix_beta
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3,3]
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     With  a  as  atom_site_aniso

     If      (a.adp_type == 'uani')  {

         C =   _cell_reciprocal.convert_U_to_beta
         B =   C * _atom_site_aniso.matrix_U * C
     }
     Else If (a.adp_type == 'bani')  {   

         C =   _cell_reciprocal.convert_U_to_beta / (2.828427 * Pi)
         B =   C * _atom_site_aniso.matrix_B * C
     }
     Else                                    {
         If (a.adp_type == 'uiso')  b  =  a.U_iso_or_equiv
         Else                       b  =  a.B_iso_or_equiv / (8 * Pi**2)

         C  =  _cell_reciprocal.convert_U_to_beta
         B  =   C * Matrix([[b,0,0],[0,b,0],[0,0,b]]) * C
     }
     _atom_site_aniso.matrix_beta =  B
;
     save_
 

save_atom_site_aniso.matrix_B
    _definition.id             '_atom_site_aniso.matrix_B'
    _definition.update           2012-11-20
    _description.text
;
     The symmetric anisotropic atomic displacement matrix B.
;
    _description.common         'AtomSiteAnisoBIJ'
    _name.category_id            aniso
    _name.object_id              matrix_B
    _type.purpose                Measurand
    _type.source                 Assembled
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3,3]
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     With a as atom_site_aniso
 
      a.matrix_B =  [[ a.B_11, a.B_12, a.B_13 ],
                     [ a.B_12, a.B_22, a.B_23 ],
                     [ a.B_13, a.B_23, a.B_33 ]] 
;
     save_
 
 
save_atom_site_aniso.B_11
    _definition.id             '_atom_site_aniso.B_11'
     loop_
    _alias.definition_id       '_atom_site_aniso_B_11'
                               '_atom_site.aniso_B[1][1]'
                               '_atom_site_anisotrop.B[1][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_BIJ'}]
    _name.category_id            aniso
    _name.object_id              B_11
     save_
 
 
save_atom_site_aniso.B_12
    _definition.id             '_atom_site_aniso.B_12'
     loop_
    _alias.definition_id       '_atom_site_aniso_B_12'
                               '_atom_site.aniso_B[1][2]'
                               '_atom_site_anisotrop.B[1][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_BIJ'}]
    _name.category_id            aniso
    _name.object_id              B_12
     save_
 
 
save_atom_site_aniso.B_13
    _definition.id             '_atom_site_aniso.B_13'
     loop_
    _alias.definition_id       '_atom_site_aniso_B_13'
                               '_atom_site.aniso_B[1][3]'
                               '_atom_site_anisotrop.B[1][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_BIJ'}]
    _name.category_id            aniso
    _name.object_id              B_13
     save_
 
 
save_atom_site_aniso.B_22
    _definition.id             '_atom_site_aniso.B_22'
     loop_
    _alias.definition_id       '_atom_site_aniso_B_22'
                               '_atom_site.aniso_B[2][2]'
                               '_atom_site_anisotrop.B[2][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_BIJ'}]
    _name.category_id            aniso
    _name.object_id              B_22
     save_
 
 
save_atom_site_aniso.B_23
    _definition.id             '_atom_site_aniso.B_23'
     loop_
    _alias.definition_id       '_atom_site_aniso_B_23'
                               '_atom_site.aniso_B[2][3]'
                               '_atom_site_anisotrop.B[2][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_BIJ'}]
    _name.category_id            aniso
    _name.object_id              B_23
     save_
 
 
save_atom_site_aniso.B_33
    _definition.id             '_atom_site_aniso.B_33'
     loop_
    _alias.definition_id       '_atom_site_aniso_B_33'
                               '_atom_site.aniso_B[3][3]'
                               '_atom_site_anisotrop.B[3][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_BIJ'}]
    _name.category_id            aniso
    _name.object_id              B_33
     save_
 
 
save_atom_site_aniso.matrix_U
    _definition.id             '_atom_site_aniso.matrix_U'
    _definition.update           2012-11-20
    _description.text
;
     The symmetric anisotropic atomic displacement matrix U.
;
    _description.common         'AtomSiteAnisoUIJ'
    _name.category_id            aniso
    _name.object_id              matrix_U
    _type.purpose                Measurand
    _type.source                 Assembled
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3,3]
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     With a as atom_site_aniso
 
        a.matrix_U =  [[ a.U_11, a.U_12, a.U_13 ],
                       [ a.U_12, a.U_22, a.U_23 ],
                       [ a.U_13, a.U_23, a.U_33 ]] 
;
     save_
 
 
save_atom_site_aniso.U_11
    _definition.id             '_atom_site_aniso.U_11'
     loop_
    _alias.definition_id       '_atom_site_aniso_U_11'
                               '_atom_site.aniso_U[1][1]'
                               '_atom_site_anisotrop.U[1][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_UIJ'}]
    _name.category_id            aniso
    _name.object_id              U_11
     save_
 
 
save_atom_site_aniso.U_12
    _definition.id             '_atom_site_aniso.U_12'
     loop_
    _alias.definition_id       '_atom_site_aniso_U_12'
                               '_atom_site.aniso_U[1][2]'
                               '_atom_site_anisotrop.U[1][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_UIJ'}]
    _name.category_id            aniso
    _name.object_id              U_12
     save_
 
 
save_atom_site_aniso.U_13
    _definition.id             '_atom_site_aniso.U_13'
     loop_
    _alias.definition_id       '_atom_site_aniso_U_13'
                               '_atom_site.aniso_U[1][3]'
                               '_atom_site_anisotrop.U[1][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_UIJ'}]
    _name.category_id            aniso
    _name.object_id              U_13
     save_
 
 
save_atom_site_aniso.U_22
    _definition.id             '_atom_site_aniso.U_22'
     loop_
    _alias.definition_id       '_atom_site_aniso_U_22'
                               '_atom_site.aniso_U[2][2]'
                               '_atom_site_anisotrop.U[2][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_UIJ'}]
    _name.category_id            aniso
    _name.object_id              U_22
     save_
 
 
save_atom_site_aniso.U_23
    _definition.id             '_atom_site_aniso.U_23'
     loop_
    _alias.definition_id       '_atom_site_aniso_U_23'
                               '_atom_site.aniso_U[2][3]'
                               '_atom_site_anisotrop.U[2][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_UIJ'}]
    _name.category_id            aniso
    _name.object_id              U_23
     save_
 
 
save_atom_site_aniso.U_33
    _definition.id             '_atom_site_aniso.U_33'
     loop_
    _alias.definition_id       '_atom_site_aniso_U_33'
                               '_atom_site.aniso_U[3][3]'
                               '_atom_site_anisotrop.U[3][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'aniso_UIJ'}]
    _name.category_id            aniso
    _name.object_id              U_33
     save_

     save_    #------ close ATOM_SITE category

     save_    #------ close ATOM_SITE_ANISO category

#============================================================================
 
 
save_ATOM_SITES
 
    _definition.id               ATOM_SITES
    _definition.scope            Category
    _definition.class            Set
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to describe information which applies
     to all atom sites in a crystal structure.
;
    _name.category_id            ATOM
    _name.object_id              SITES
 
 
save_atom_sites.solution_primary
    _definition.id             '_atom_sites.solution_primary'
     loop_
    _alias.definition_id       '_atom_sites_solution_primary'
    _definition.update           2012-11-20
    _description.text
;
     Codes which identify the methods used to locate the initial
     atom sites. The *_primary code identifies how the first
     atom sites were determined; the *_secondary code identifies
     how the remaining non-hydrogen sites were located; and the
     *_hydrogens code identifies how the hydrogen sites were located.

     Ref: Sheldrick, G. M., Hauptman, H. A., Weeks, C. M.,
          Miller, R. and Us\'on, I. (2001). Ab initio phasing.
          In International Tables for Crystallography,
          Vol. F. Crystallography of biological macromolecules,
          edited by M. G. Rossmann and E. Arnold, ch. 16.1.
          Dordrecht: Kluwer Academic Publishers.
;
    _description.common         'MethodologySolnPrimary'
    _name.category_id            sites
    _name.object_id              solution_primary
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail
       difmap     'difference Fourier map'
       vecmap     'real-space vector search'
       heavy      'heavy-atom method'
       direct     'structure-invariant direct methods'
       geom       'inferred from neighbouring sites'
       disper     'anomalous-dispersion techniques'
       isomor     'isomorphous structure methods'
       notdet     'coordinates were not determined'
       dual       'dual-space method (Sheldrick et al., 2001)'
       iterative '''iterative e.g. charge flipping [Oszl\'anyi, G. 
                  and S\"uto, A. (2004). Acta Cryst. A60, 134-141]'''
       other      'a method not included elsewhere in this list'

    _enumeration.default         direct
     save_
 
 
save_atom_sites.solution_secondary
    _definition.id             '_atom_sites.solution_secondary'
     loop_
    _alias.definition_id       '_atom_sites_solution_secondary'
    _definition.update           2012-11-20
    _description.text
;
     Codes which identify the methods used to locate the initial
     atom sites. The *_primary code identifies how the first 
     atom sites were determined; the *_secondary code identifies
     how the remaining non-hydrogen sites were located; and the
     *_hydrogens code identifies how the hydrogen sites were located.

     Ref: Sheldrick, G. M., Hauptman, H. A., Weeks, C. M.,
          Miller, R. and Us\'on, I. (2001). Ab initio phasing.
          In International Tables for Crystallography,
          Vol. F. Crystallography of biological macromolecules,
          edited by M. G. Rossmann and E. Arnold, ch. 16.1. 
          Dordrecht: Kluwer Academic Publishers.
;
    _description.common         'MethodologySolnSecondary'
    _name.category_id            sites
    _name.object_id              solution_secondary
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail
       difmap     'difference Fourier map'
       vecmap     'real-space vector search'
       heavy      'heavy-atom method'
       direct     'structure-invariant direct methods'
       geom       'inferred from neighbouring sites'
       disper     'anomalous-dispersion techniques'
       isomor     'isomorphous structure methods'
       notdet     'coordinates were not determined'
       dual       'dual-space method (Sheldrick et al., 2001)'
       iterative '''iterative e.g. charge flipping [Oszl\'anyi, G.
                  and S\"uto, A. (2004). Acta Cryst. A60, 134-141]'''
       other      'a method not included elsewhere in this list'

    _enumeration.default         difmap
     save_
 
 
save_atom_sites.solution_hydrogens
    _definition.id             '_atom_sites.solution_hydrogens'
     loop_
    _alias.definition_id       '_atom_sites_solution_hydrogens'
    _definition.update           2012-11-20
    _description.text
;
     Codes which identify the methods used to locate the initial
     atom sites. The *_primary code identifies how the first
     atom sites were determined; the *_secondary code identifies
     how the remaining non-hydrogen sites were located; and the
     *_hydrogens code identifies how the hydrogen sites were located.

     Ref: Sheldrick, G. M., Hauptman, H. A., Weeks, C. M.,
          Miller, R. and Us\'on, I. (2001). Ab initio phasing.
          In International Tables for Crystallography,
          Vol. F. Crystallography of biological macromolecules,
          edited by M. G. Rossmann and E. Arnold, ch. 16.1.
          Dordrecht: Kluwer Academic Publishers.
;
    _description.common         'methodologySolnHatoms'
    _name.category_id            sites
    _name.object_id              solution_hydrogens
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail
       difmap     'difference Fourier map'
       vecmap     'real-space vector search'
       heavy      'heavy-atom method'
       direct     'structure-invariant direct methods'
       geom       'inferred from neighbouring sites'
       disper     'anomalous-dispersion techniques'
       isomor     'isomorphous structure methods'
       notdet     'coordinates were not determined'
       dual       'dual-space method (Sheldrick et al., 2001)'
       iterative '''iterative e.g. charge flipping [Oszl\'anyi, G.
                  and S\"uto, A. (2004). Acta Cryst. A60, 134-141]'''
       other      'a method not included elsewhere in this list'

    _enumeration.default         difmap
     save_
 

save_atom_sites.special_details
    _definition.id             '_atom_sites.special_details'
     loop_
    _alias.definition_id       '_atom_sites_special_details'
    _definition.update           2012-11-20
    _description.text
;
    Information about atomic coordinates not coded elsewhere in the CIF.
;
    _name.category_id            sites
    _name.object_id              special_details
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     save_


#----------------------------------------------------------------------------
 

save_ATOM_SITES_CARTN_TRANSFORM
 
    _definition.id               ATOM_SITES_CARTN_TRANSFORM
    _definition.scope            Category
    _definition.class            Set
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to describe the matrix elements
     used to transform Cartesion coordinates into fractional coordinates
     of all atom sites in a crystal structure.
;
    _name.category_id            ATOM_SITES
    _name.object_id              CARTN_TRANSFORM
 

save_atom_sites_Cartn_transform.axes
    _definition.id             '_atom_sites_Cartn_transform.axes'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_transform_axes'
                               '_atom_sites.Cartn_transform_axes'
    _definition.update           2012-12-11
    _description.text
;
     Description of the relative alignment of the crystal cell axes to the
     Cartesian orthogonal axes as applied in the transformation matrix
     _atom_sites_Cartn_transform.matrix.
;
    _description.common         'AtomSitesCartnTransfAxes'
    _name.category_id            Cartn_transform
    _name.object_id              axes
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case   'a parallel to x; b in the plane of y & z'
     save_
 
 
save_atom_sites_Cartn_transform.matrix
    _definition.id             '_atom_sites_Cartn_transform.matrix'
    _definition.update           2012-12-11
    _description.text
;
     Matrix used to transform fractional coordinates in the ATOM_SITE
     category to Cartesian  coordinates. The axial alignments of this
     transformation are described in _atom_sites_Cartn_transform.axes.
     The 3 x 1 translation is defined in _atom_sites_Cartn_transform.vector.
 
       x'                   |11 12 13|     x                  | 1 |
     ( y' ) Cartesian   =   |21 22 23| * ( y ) fractional  + v| 2 |
       z'                   |31 32 33|     z                  | 3 |
 
     The default transformation matrix uses Rollet's axial 
     assignments with cell vectors a,b,c aligned with orthogonal 
     axes X,Y,Z so that c||Z and b in plane YZ.
;
    _description.common         'AtomSitesCartnTransfMatrix'
    _name.category_id            Cartn_transform
    _name.object_id              matrix
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3,3]
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With a as atom_sites_Cartn_transform

     _atom_sites_Cartn_transform.matrix = [[a.mat_11, a.mat_12, a.mat_13],
                                           [a.mat_21, a.mat_22, a.mat_23],
                                           [a.mat_31, a.mat_32, a.mat_33]]
;
     save_


save_atom_sites_Cartn_transform.mat_11
    _definition.id             '_atom_sites_Cartn_transform.mat_11'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_11'
                               '_atom_sites_Cartn_tran_matrix_[1][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_11
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With l  as  cell_length
     With a  as  cell_angle
     With r  as  cell_reciprocal_angle

    _atom_sites_Cartn_transform.mat_11 =  l.a*Sind(a.beta)*Sind(r.gamma)
;
     save_


save_atom_sites_Cartn_transform.mat_12
    _definition.id             '_atom_sites_Cartn_transform.mat_12'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_12'
                               '_atom_sites_Cartn_tran_matrix_[1][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_12
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
    _atom_sites_Cartn_transform.mat_12 =  0.
;
     save_


save_atom_sites_Cartn_transform.mat_13
    _definition.id             '_atom_sites_Cartn_transform.mat_13'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_13'
                               '_atom_sites_Cartn_tran_matrix_[1][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_13
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
    _atom_sites_Cartn_transform.mat_13 =  0.
;
     save_


save_atom_sites_Cartn_transform.mat_21
    _definition.id             '_atom_sites_Cartn_transform.mat_21'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_21'
                               '_atom_sites_Cartn_tran_matrix_[2][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_21
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With l  as  cell_length
     With a  as  cell_angle
     With r  as  cell_reciprocal_angle

    _atom_sites_Cartn_transform.mat_21 =  -l.a*Sind(a.beta)*Cosd(r.gamma)
;
     save_


save_atom_sites_Cartn_transform.mat_22
    _definition.id             '_atom_sites_Cartn_transform.mat_22'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_22'
                               '_atom_sites_Cartn_tran_matrix_[2][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_22
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With a  as  cell_angle

    _atom_sites_Cartn_transform.mat_22 =  _cell_length.b * Sind(a.alpha)
;
     save_


save_atom_sites_Cartn_transform.mat_23
    _definition.id             '_atom_sites_Cartn_transform.mat_23'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_23'
                               '_atom_sites_Cartn_tran_matrix_[2][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_23
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
    _atom_sites_Cartn_transform.mat_23 =  0.
;
     save_


save_atom_sites_Cartn_transform.mat_31
    _definition.id             '_atom_sites_Cartn_transform.mat_31'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_31'
                               '_atom_sites_Cartn_tran_matrix_[3][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_31
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With a  as  cell_angle

    _atom_sites_Cartn_transform.mat_31 =  _cell_length.a * Cosd(a.beta)
;
     save_


save_atom_sites_Cartn_transform.mat_32
    _definition.id             '_atom_sites_Cartn_transform.mat_32'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_32'
                               '_atom_sites_Cartn_tran_matrix_[3][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_32
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With a  as  cell_angle

    _atom_sites_Cartn_transform.mat_32 =  _cell_length.b * Cosd(a.alpha)
;
     save_


save_atom_sites_Cartn_transform.mat_33
    _definition.id             '_atom_sites_Cartn_transform.mat_33'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_matrix_33'
                               '_atom_sites_Cartn_tran_matrix_[3][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              mat_33
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
    _atom_sites_Cartn_transform.mat_33 =  _cell_length.c
;
     save_

 
save_atom_sites_Cartn_transform.vector
    _definition.id             '_atom_sites_Cartn_transform.vector'
    _definition.update           2012-11-20
    _description.text
;
     The 3x1 translation is used with _atom_sites_Cartn_transform.matrix
     used to transform fractional coordinates to Cartesian  coordinates. 
     The axial alignments of this transformation are described in 
     _atom_sites_Cartn_transform.axes.
;
    _description.common         'AtomSitesCartnTransfVector'
    _name.category_id            atom_sites_Cartn_transform
    _name.object_id              vector
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3]
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With t as atom_sites_Cartn_transform

    _atom_sites_Cartn_transform.vector =  [ t.vec_1, t.vec_2, t.vec_3 ]
;
     save_


save_atom_sites_Cartn_transform.vec_1
    _definition.id             '_atom_sites_Cartn_transform.vec_1'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_vector_1'
                               '_atom_sites_Cartn_tran_vector_[1]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              vec_1
     save_


save_atom_sites_Cartn_transform.vec_2
    _definition.id             '_atom_sites_Cartn_transform.vec_2'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_vector_2'
                               '_atom_sites_Cartn_tran_vector_[2]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              vec_2
     save_


save_atom_sites_Cartn_transform.vec_3
    _definition.id             '_atom_sites_Cartn_transform.vec_3'
     loop_
    _alias.definition_id       '_atom_sites_Cartn_tran_vector_3'
                               '_atom_sites_Cartn_tran_vector_[3]'
    _import.get         [{"file":'templ_attr.cif',"save":'Cartn_matrix'}]
    _name.category_id            Cartn_transform
    _name.object_id              vec_3
     save_

     save_    #------ close ATOM_SITES_CARTN_TRANSFORM category

    
#----------------------------------------------------------------------------
 

save_ATOM_SITES_FRACT_TRANSFORM
 
    _definition.id               ATOM_SITES_FRACT_TRANSFORM
    _definition.scope            Category
    _definition.class            Set
    _definition.update           2012-12-11
    _description.text
;
     The CATEGORY of data items used to describe the matrix elements
     used to transform Cartesion coordinates into fractional coordinates
     of all atom sites in a crystal structure.
;
    _name.category_id            ATOM_SITES
    _name.object_id              FRACT_TRANSFORM
 

save_atom_sites_fract_transform.axes
    _definition.id             '_atom_sites_fract_transform.axes'
     loop_
    _alias.definition_id       '_atom_sites_fract_transform_axes'
                               '_atom_sites.fract_transform_axes'
    _definition.update           2012-12-11
    _description.text
;
     Description of the relative alignment of the crystal cell axes to the
     Cartesian orthogonal axes as applied in the transformation matrix
     _atom_sites_fract_transform.matrix.
;
    _description.common         'AtomSitesfractTransfAxes'
    _name.category_id            fract_transform
    _name.object_id              axes
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case   'a parallel to x; b in the plane of y & z'
     save_
 
 
save_atom_sites_fract_transform.matrix
    _definition.id             '_atom_sites_fract_transform.matrix'
    _definition.update           2012-12-11
    _description.text
;
     Matrix used to transform fractional coordinates in the ATOM_SITE
     category to Cartesian  coordinates. The axial alignments of this
     transformation are described in _atom_sites_fract_transform.axes.
     The 3 x 1 translation is defined in _atom_sites_fract_transform.vector.
 
       x'                   |11 12 13|     x                  | 1 |
     ( y' )fractional = mat |21 22 23| * ( y ) Cartesian + vec| 2 |
       z'                   |31 32 33|     z                  | 3 |
 
     The default transformation matrix uses Rollet's axial 
     assignments with cell vectors a,b,c aligned with orthogonal 
     axes X,Y,Z so that c||Z and b in plane YZ.
;
    _description.common         'AtomSitesfractTransfMatrix'
    _name.category_id            fract_transform
    _name.object_id              matrix
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3,3]
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With a as atom_sites_fract_transform

     _atom_sites_fract_transform.matrix = [[a.mat_11, a.mat_12, a.mat_13],
                                           [a.mat_21, a.mat_22, a.mat_23],
                                           [a.mat_31, a.mat_32, a.mat_33]]
;
     save_


save_atom_sites_fract_transform.mat_11
    _definition.id             '_atom_sites_fract_transform.mat_11'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_11'
                               '_atom_sites_fract_tran_matrix_[1][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_11
     save_


save_atom_sites_fract_transform.mat_12
    _definition.id             '_atom_sites_fract_transform.mat_12'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_12'
                               '_atom_sites_fract_tran_matrix_[1][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_12
     save_


save_atom_sites_fract_transform.mat_13
    _definition.id             '_atom_sites_fract_transform.mat_13'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_13'
                               '_atom_sites_fract_tran_matrix_[1][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_13
     save_


save_atom_sites_fract_transform.mat_21
    _definition.id             '_atom_sites_fract_transform.mat_21'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_21'
                               '_atom_sites_fract_tran_matrix_[2][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_21
     save_


save_atom_sites_fract_transform.mat_22
    _definition.id             '_atom_sites_fract_transform.mat_22'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_22'
                               '_atom_sites_fract_tran_matrix_[2][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_22
     save_


save_atom_sites_fract_transform.mat_23
    _definition.id             '_atom_sites_fract_transform.mat_23'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_23'
                               '_atom_sites_fract_tran_matrix_[2][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_23
     save_


save_atom_sites_fract_transform.mat_31
    _definition.id             '_atom_sites_fract_transform.mat_31'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_31'
                               '_atom_sites_fract_tran_matrix_[3][1]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_31
     save_


save_atom_sites_fract_transform.mat_32
    _definition.id             '_atom_sites_fract_transform.mat_32'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_32'
                               '_atom_sites_fract_tran_matrix_[3][2]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_32
     save_


save_atom_sites_fract_transform.mat_33
    _definition.id             '_atom_sites_fract_transform.mat_33'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_matrix_33'
                               '_atom_sites_fract_tran_matrix_[3][3]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              mat_33
     save_

 
save_atom_sites_fract_transform.vector
    _definition.id             '_atom_sites_fract_transform.vector'
    _definition.update           2012-11-20
    _description.text
;
     The 3x1 translation is used with _atom_sites_fract_transform.matrix
     used to transform Cartesian coordinates to fractional  coordinates. 
     The axial alignments of this transformation are described in 
     _atom_sites_fract_transform.axes.
;
    _description.common         'AtomSitesfractTransfVector'
    _name.category_id            atom_sites_fract_transform
    _name.object_id              vector
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [3]
    loop_
    _method.purpose
    _method.expression
     Evaluation
;
     With t as atom_sites_fract_transform

    _atom_sites_fract_transform.vector =  [ t.vec_1, t.vec_2, t.vec_3 ]
;
     save_


save_atom_sites_fract_transform.vec_1
    _definition.id             '_atom_sites_fract_transform.vec_1'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_vector_1'
                               '_atom_sites_fract_tran_vector_[1]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              vec_1
     save_


save_atom_sites_fract_transform.vec_2
    _definition.id             '_atom_sites_fract_transform.vec_2'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_vector_2'
                               '_atom_sites_fract_tran_vector_[2]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              vec_2
     save_


save_atom_sites_fract_transform.vec_3
    _definition.id             '_atom_sites_fract_transform.vec_3'
     loop_
    _alias.definition_id       '_atom_sites_fract_tran_vector_3'
                               '_atom_sites_fract_tran_vector_[3]'
    _import.get         [{"file":'templ_attr.cif',"save":'fract_matrix'}]
    _name.category_id            fract_transform
    _name.object_id              vec_3
     save_

     save_    #------ close ATOM_SITES_FRACT_TRANSFORM category

     save_    #------ close ATOM_SITES category

 
#============================================================================
 
save_ATOM_TYPE
 
    _definition.id               ATOM_TYPE
    _definition.scope            Category
    _definition.class            Loop
    _definition.update           2013-02-18
    _description.text
;
     The CATEGORY of data items used to describe atomic type information
     used in crystallographic structure studies.
;
    _description.common         'AtomTypeList'
    _name.category_id            ATOM           
    _name.object_id              TYPE
    _category.key_id           '_atom_type.key'
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     typelist  = List()
  
     Loop  a  as  atom_site  {
        type = AtomType ( a.label )
        If( type not in typelist )  typelist ++= type
      }
      For type in typelist {
                              atom_type(.symbol         = type,
                                        .number_in_cell = '?'   )
      }
;
 
 
save_atom_type.key
    _definition.id             '_atom_type.key'
    _definition.update           2012-11-20
    _description.text
;
     Value is a unique key to a set of ATOM_TYPE items
     in a looped list.
;
    _description.common         'Key to list of atomic types'
    _name.category_id            type
    _name.object_id              key
    _type.purpose                Key
    _type.source                 Assembled
    _type.container              Single
    loop_
    _method.purpose
    _method.expression
     Definition
;              _type.contents = Type_Contents(atom_type.symbol)
;
     Evaluation
;              _atom_type.key = _atom_type.symbol
;
     save_
 
 
save_atom_type.analytical_mass_percent
    _definition.id             '_atom_type.analytical_mass_percent'
     loop_
    _alias.definition_id       '_atom_type_analytical_mass_%'
    _definition.update           2012-11-20
    loop_
    _alias.definition_id       '_atom_type.analytical_mass_%'
    _description.text
;
     Mass percentage of this atom type derived from chemical analysis.
;
    _description.common         'AtomTypeComposition%'
    _name.category_id            type
    _name.object_id              analytical_mass_percent
    _type.purpose                Measurand
    _type.source                 Observed
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:100.
     save_
 
 
save_atom_type.atomic_mass
    _definition.id             '_atom_type.atomic_mass'
    _definition.update           2012-11-20
    _description.text
;
     Mass of this atom type.
;
    _description.common         'AtomTypeMass'
    _name.category_id            type
    _name.object_id              atomic_mass
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _import.get         [{"file":'templ_enum.cif',"save":'atomic_mass'}]
    _enumeration.def_index_id  '_atom_type.symbol'
    _units.code                  daltons
     save_
 
 
save_atom_type.atomic_number
    _definition.id             '_atom_type.atomic_number'
    _definition.update           2012-11-20
    _description.text
;
     Atomic number of this atom type.
;
    _description.common         'AtomTypeNumber'
    _name.category_id            type
    _name.object_id              atomic_number
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Index
    _import.get         [{"file":'templ_enum.cif',"save":'atomic_number'}]
    _enumeration.def_index_id  '_atom_type.symbol'
     save_
 
 
save_atom_type.description
    _definition.id             '_atom_type.description'
     loop_
    _alias.definition_id       '_atom_type_description'
    _definition.update           2012-11-20
    _description.text
;
     A description of the atom(s) designated by this atom type. In
     most cases this will be the element name and oxidation state of
     a single atom  species. For disordered or nonstoichiometric
     structures it will describe a combination of atom species.
;
    _description.common         'AtomTypeDetails'
    _name.category_id            type
    _name.object_id              description
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case    deuterium     '0.34Fe+0.66Ni'
     save_
 
 
save_atom_type.display_colour
    _definition.id             '_atom_type.display_colour'
    _definition.update           2012-11-20
    _description.text
;
     The display colour assigned to this atom type. Note that the
     possible colours are enumerated in the display_colour list
     category of items.
;
    _description.common         'AtomTypeColour'
    _name.category_id            type
    _name.object_id              display_colour
    _type.purpose                State
    _type.source                 Selected
    _type.container              Single
    _type.contents               Code
    _import.get         [{"file":'templ_enum.cif',"save":'colour_rgb'},
                         {"file":'templ_enum.cif',"save":'colour_hue'}]
    _enumeration.def_index_id  '_atom_type.symbol'
     save_
 
 
save_atom_type.electron_count
    _definition.id             '_atom_type.electron_count'
    _definition.update           2012-11-20
    _description.text
;
     Number of electrons in this atom type.
;
    _description.common         'AtomTypeElectrons'
    _name.category_id            type
    _name.object_id              electron_count
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Index
    _import.get         [{"file":'templ_enum.cif',"save":'electron_count'}]
    _enumeration.def_index_id  '_atom_type.symbol'
    _enumeration.range           1:
     save_
 
 
save_atom_type.element_symbol
    _definition.id             '_atom_type.element_symbol'
    _definition.update           2012-11-20
    _description.text
;
     Element symbol for of this atom type. The default value is extracted
     from the ion-to-element enumeration_default list using the index
     value of atom_type.symbol.
;
    _description.common         'AtomTypeElement'
    _name.category_id            type
    _name.object_id              element_symbol
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
    _import.get         [{"file":'templ_enum.cif',"save":'element_symbol'},
                         {"file":'templ_enum.cif',"save":'ion_to_element'}]
    _enumeration.def_index_id  '_atom_type.symbol'
     save_
 
 
save_atom_type.number_in_cell
    _definition.id             '_atom_type.number_in_cell'
     loop_
    _alias.definition_id       '_atom_type_number_in_cell'
    _definition.update           2013-01-28
    _description.text
;
     Total number of atoms of this atom type in the unit cell.
;
    _description.common         'AtomTypeCellCount'
    _name.category_id            type
    _name.object_id              number_in_cell
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0:
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
    With t as atom_type

    cnt =  0.

    Loop a  as  atom_site  {

       if ( a.type_symbol == t.symbol ) {

          cnt +=  a.occupancy * a.site_symmetry_multiplicity
    }  }
    _atom_type.number_in_cell =  cnt
;
     save_
 
 
save_atom_type.oxidation_number
    _definition.id             '_atom_type.oxidation_number'
     loop_
    _alias.definition_id       '_atom_type_oxidation_number'
    _definition.update           2012-11-20
    _description.text
;
     Formal oxidation state of this atom type in the structure.
;
    _description.common         'AtomTypeOxidation'
    _name.category_id            type
    _name.object_id              oxidation_number
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Integer
    _enumeration.range          -8:8
    _enumeration.default         0
     save_
 
 
save_atom_type.radius_bond
    _definition.id             '_atom_type.radius_bond'
     loop_
    _alias.definition_id       '_atom_type_radius_bond'
    _definition.update           2012-11-20
    _description.text
;
     The effective intra-molecular bonding radius of this atom type.
;
    _description.common         'AtomTypeBondRad'
    _name.category_id            type
    _name.object_id              radius_bond
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _import.get         [{"file":'templ_enum.cif',"save":'radius_bond'}]
    _enumeration.def_index_id  '_atom_type.symbol'
    _enumeration.range           0.0:5.0
    _units.code                  angstroms
     save_
 
 
save_atom_type.radius_contact
    _definition.id             '_atom_type.radius_contact'
     loop_
    _alias.definition_id       '_atom_type_radius_contact'
    _definition.update           2012-11-20
    _description.text
;
     The effective inter-molecular bonding radius of this atom type.
;
    _description.common         'AtomTypeContactRad'
    _name.category_id            type
    _name.object_id              radius_contact
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:5.0
    _units.code                  angstroms
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     _atom_type.radius_contact =  atom_type.radius_bond + 1.25
;
     save_
 
 
save_atom_type.symbol
    _definition.id             '_atom_type.symbol'
     loop_
    _alias.definition_id       '_atom_type_symbol'
    _definition.update           2012-12-21
    _description.text
;
     The identity of the atom specie(s) representing this atom type.
     Normally this code is the element symbol followed by the charge
     if there is one. The symbol may be composed of any character except
     an underline or a blank, with the proviso that digits designate an
     oxidation state and must be followed by a + or - character.
;
    _description.common         'AtomTypeSymbol'
    _name.category_id            type
    _name.object_id              symbol
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _description_example.case    Mg  Cu2+  dummy  FeNi
     save_

 
#============================================================================
 
 
save_ATOM_TYPE_SCAT
 
    _definition.id               ATOM_TYPE_SCAT
    _definition.scope            Category
    _definition.class            Loop
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to describe atomic scattering
     information used in crystallographic structure studies.
;
    _name.category_id            ATOM_TYPE
    _name.object_id              SCAT 
    _category.key_id           '_atom_type_scat.key'
 
 
save_atom_type_scat.key
    _definition.id             '_atom_type_scat.key'
    _definition.update           2012-11-20
    _description.text
;
     Value is a unique key to a set of ATOM_TYPE_SCAT items in a 
     looped list. This list may be joined with the ATOM_TYPE list.
;
    _description.common         'Key to atomic scattering list'
    _name.category_id            scat
    _name.object_id              key
    _type.purpose                Key
    _type.source                 Assembled
    _type.container              Single
    loop_
    _method.purpose
    _method.expression
     Definition
;              _type.contents = Type_Contents(atom_type_scat.symbol)
;
     Evaluation
;              _atom_type_scat.key = _atom_type_scat.symbol
;
     save_
 
 
save_atom_type_scat.Cromer_Mann_coeffs
    _definition.id             '_atom_type_scat.Cromer_Mann_coeffs'
    _definition.update           2012-11-20
    _description.text
;
     The set of Cromer-Mann coefficients for generating X-ray scattering
     factors. [ a1, b1, a2, b2, a3, b3, a4, b4, c]
     Ref: International Tables for Crystallography, Vol. C
             (1991) Table 6.1.1.4
;
    _description.common         'AtomTypeCMCoeffs'
    _name.category_id            scat
    _name.object_id              Cromer_Mann_coeffs
    _type.purpose                Quantity
    _type.source                 Assembled
    _type.container              List
    _type.contents               Real
    _type.dimension              [9]
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     With t  as  atom_type_scat
 
      _atom_type_scat.Cromer_Mann_coeffs  =          [ t.Cromer_Mann_c,
                                     t.Cromer_Mann_a1, t.Cromer_Mann_b1, 
                                     t.Cromer_Mann_a2, t.Cromer_Mann_b2, 
                                     t.Cromer_Mann_a3, t.Cromer_Mann_b3, 
                                     t.Cromer_Mann_a4, t.Cromer_Mann_b4 ]
;
     save_
 
 
save_atom_type_scat.Cromer_Mann_a1
    _definition.id             '_atom_type_scat.Cromer_Mann_a1'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_a1'
                               '_atom_type.scat_Cromer_Mann_a1'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_a1'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_a1
     save_
 
 
save_atom_type_scat.Cromer_Mann_a2
    _definition.id             '_atom_type_scat.Cromer_Mann_a2'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_a2'
                               '_atom_type.scat_Cromer_Mann_a2'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_a2'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_a2
     save_
 
 
save_atom_type_scat.Cromer_Mann_a3
    _definition.id             '_atom_type_scat.Cromer_Mann_a3'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_a3'
                               '_atom_type.scat_Cromer_Mann_a3'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_a3'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_a3
     save_
 
 
save_atom_type_scat.Cromer_Mann_a4
    _definition.id             '_atom_type_scat.Cromer_Mann_a4'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_a4'
                               '_atom_type.scat_Cromer_Mann_a4'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_a4'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_a4
     save_
 
 
save_atom_type_scat.Cromer_Mann_b1
    _definition.id             '_atom_type_scat.Cromer_Mann_b1'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_b1'
                               '_atom_type.scat_Cromer_Mann_b1'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_b1'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_b1
     save_
 
 
save_atom_type_scat.Cromer_Mann_b2
    _definition.id             '_atom_type_scat.Cromer_Mann_b2'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_b2'
                               '_atom_type.scat_Cromer_Mann_b2'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_b2'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_b2
     save_
 
 
save_atom_type_scat.Cromer_Mann_b3
    _definition.id             '_atom_type_scat.Cromer_Mann_b3'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_b3'
                               '_atom_type.scat_Cromer_Mann_b3'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_b3'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_b3
     save_
 
 
save_atom_type_scat.Cromer_Mann_b4
    _definition.id             '_atom_type_scat.Cromer_Mann_b4'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_b4'
                               '_atom_type.scat_Cromer_Mann_b4'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_b4'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_b4
     save_
 
 
save_atom_type_scat.Cromer_Mann_c
    _definition.id             '_atom_type_scat.Cromer_Mann_c'
     loop_
    _alias.definition_id       '_atom_type_scat_Cromer_Mann_c'
                               '_atom_type.scat_Cromer_Mann_c'
    _import.get         [{"file":'templ_attr.cif',"save":'Cromer_Mann_coeff'},
                         {"file":'templ_enum.cif',"save":'Cromer_Mann_c'}]
    _name.category_id            scat
    _name.object_id              Cromer_Mann_c
     save_
 
 
save_atom_type_scat.dispersion_imag
    _definition.id             '_atom_type_scat.dispersion_imag'
     loop_
    _alias.definition_id       '_atom_type_scat_dispersion_imag'
                               '_atom_type.scat_dispersion_imag'
    _definition.update           2012-11-20
    _description.text
;
     The imaginary component of the anomalous dispersion scattering factors
     for this atom type and radiation by _diffrn_radiation_wavelength.value
;
    _description.common         'AnomDispImag'
    _name.category_id            scat
    _name.object_id              dispersion_imag
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.default         0.0
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
    With q as atom_type_scat

     If ( _diffrn_radiation.type == 'Cu' ) a = q.dispersion_imag_cu
     If ( _diffrn_radiation.type == 'Mo' ) a = q.dispersion_imag_mo

             _atom_type_scat.dispersion_imag = a
;
     save_
 
 
save_atom_type_scat.dispersion_imag_cu
    _definition.id             '_atom_type_scat.dispersion_imag_cu'
    _definition.update           2012-11-20
    _description.text
;
     The imaginary component of the anomalous dispersion scattering factors
     for this atom type and Cu K alpha radiation
;
    _description.common         'AnomDispImagCu'
    _name.category_id            scat
    _name.object_id              dispersion_imag_cu
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _import.get         [{"file":'templ_enum.cif',"save":'dispersion_imag_cu'}]
    _enumeration.def_index_id  '_atom_type.symbol'
     save_
 
 
save_atom_type_scat.dispersion_imag_mo
    _definition.id             '_atom_type_scat.dispersion_imag_mo'
    _definition.update           2012-11-20
    _description.text
;
     The imaginary component of the anomalous dispersion scattering factors
     for this atom type and Mo K alpha radiation
;
    _description.common         'AnomDispImagMo'
    _name.category_id            scat
    _name.object_id              dispersion_imag_mo
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _import.get         [{"file":'templ_enum.cif',"save":'dispersion_imag_mo'}]
    _enumeration.def_index_id  '_atom_type.symbol'
     save_
 
 
save_atom_type_scat.dispersion_real
    _definition.id             '_atom_type_scat.dispersion_real'
     loop_
    _alias.definition_id       '_atom_type_scat_dispersion_real'
                               '_atom_type.scat_dispersion_real'
    _definition.update           2012-11-20
    _description.text
;
     The real component of the anomalous dispersion scattering factors
     for this atom type and radiation by _diffrn_radiation_wavelength.value
;
    _description.common         'AtomTypeAnomDispReal'
    _name.category_id            scat
    _name.object_id              dispersion_real
    _type.purpose                Quantity
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
    With q as atom_type_scat

     If ( _diffrn_radiation.type == 'Cu' ) a = q.dispersion_real_cu
     If ( _diffrn_radiation.type == 'Mo' ) a = q.dispersion_real_mo

             _atom_type_scat.dispersion_real = a
;
    _enumeration.default         0.0
     save_
 
 
save_atom_type_scat.dispersion_real_cu
    _definition.id             '_atom_type_scat.dispersion_real_cu'
    _definition.update           2012-11-20
    _description.text
;
     The real component of the anomalous dispersion scattering factors
     for this atom type and Cu K alpha radiation
;
    _description.common         'AnomDispRealCu'
    _name.category_id            scat
    _name.object_id              dispersion_real_cu
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _import.get         [{"file":'templ_enum.cif',"save":'dispersion_real_cu'}]
    _enumeration.def_index_id  '_atom_type.symbol'
     save_
 
 
save_atom_type_scat.dispersion_real_mo
    _definition.id             '_atom_type_scat.dispersion_real_mo'
    _definition.update           2012-11-20
    _description.text
;
     The real component of the anomalous dispersion scattering factors
     for this atom type and Mo K alpha radiation
;
    _description.common         'AnomDispRealMo'
    _name.category_id            scat
    _name.object_id              dispersion_real_mo
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _import.get         [{"file":'templ_enum.cif',"save":'dispersion_real_mo'}]
    _enumeration.def_index_id  '_atom_type.symbol'
     save_
 
 
save_atom_type_scat.dispersion_source
    _definition.id             '_atom_type_scat.dispersion_source'
     loop_
    _alias.definition_id       '_atom_type_scat_dispersion_source'
    _definition.update           2012-11-20
    _description.text
;
     Reference to source of real and imaginary dispersion
     corrections for scattering factors used for this atom type.
;
    _description.common         'AtomTypeAnomDispDetails'
    _name.category_id            scat
    _name.object_id              dispersion_source
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case   'International Tables Vol. IV Table 2.3.1'
     save_
 
 
save_atom_type_scat.hi_ang_Fox_coeffs
    _definition.id             '_atom_type_scat.hi_ang_Fox_coeffs'
    _definition.update           2012-11-30
    _description.text
;
     The set of Fox et al. coefficients for generating high angle
     X-ray scattering factors. [ c0, c1, c2, c3 ]
     Ref: International Tables for Crystallography, Vol. C
             (1991) Table 6.1.1.5
;
    _description.common         'AtomTypeFoxCoeffs'
    _name.category_id            scat
    _name.object_id              hi_ang_Fox_coeffs
    _type.purpose                Quantity
    _type.source                 Assembled
    _type.container              List
    _type.contents               Real
    _type.dimension              [4]
     loop_
    _method.purpose     
    _method.expression
     Evaluation
;
     With t  as  atom_type_scat
 
    _atom_type_scat.hi_ang_Fox_coeffs  =  \
     [t.hi_ang_Fox_c0,t.hi_ang_Fox_c1,t.hi_ang_Fox_c2,t.hi_ang_Fox_c3]
;
     save_
 
 
save_atom_type_scat.hi_ang_Fox_c0
    _definition.id             '_atom_type_scat.hi_ang_Fox_c0'
    _import.get         [{"file":'templ_attr.cif',"save":'hi_ang_Fox_coeffs'},
                         {"file":'templ_enum.cif',"save":'hi_ang_Fox_c0'}]
    _name.category_id            scat
    _name.object_id              hi_ang_Fox_c0
     save_
 
 
save_atom_type_scat.hi_ang_Fox_c1
    _definition.id             '_atom_type_scat.hi_ang_Fox_c1'
    _import.get         [{"file":'templ_attr.cif',"save":'hi_ang_Fox_coeffs'},
                         {"file":'templ_enum.cif',"save":'hi_ang_Fox_c1'}]
    _name.category_id            scat
    _name.object_id              hi_ang_Fox_c1
     save_
 
 
save_atom_type_scat.hi_ang_Fox_c2
    _definition.id             '_atom_type_scat.hi_ang_Fox_c2'
    _import.get         [{"file":'templ_attr.cif',"save":'hi_ang_Fox_coeffs'},
                         {"file":'templ_enum.cif',"save":'hi_ang_Fox_c2'}]
    _name.category_id            scat
    _name.object_id              hi_ang_Fox_c2
     save_
 
 
save_atom_type_scat.hi_ang_Fox_c3
    _definition.id             '_atom_type_scat.hi_ang_Fox_c3'
    _import.get         [{"file":'templ_attr.cif',"save":'hi_ang_Fox_coeffs'},
                         {"file":'templ_enum.cif',"save":'hi_ang_Fox_c3'}]
    _name.category_id            scat
    _name.object_id              hi_ang_Fox_c3
     save_
 
 
save_atom_type_scat.length_neutron
    _definition.id             '_atom_type_scat.length_neutron'
     loop_
    _alias.definition_id       '_atom_type_scat_length_neutron'
    _definition.update           2012-11-20
    _description.text
;
     The bound coherent scattering length for the atom type at the
     isotopic composition used for the diffraction experiment.
;
    _description.common         'AtomTypeScatNeutronB'
    _name.category_id            scat
    _name.object_id              length_neutron
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Real
    _enumeration.default         0.0
    _units.code                  femtometres
     save_
 
 
save_atom_type_scat.source
    _definition.id             '_atom_type_scat.source'
     loop_
    _alias.definition_id       '_atom_type_scat_source'
                               '_atom_type.scat_source'
    _definition.update           2012-11-20
    _description.text
;
     Reference to source of scattering factors used for this atom type.
;
    _description.common         'AtomTypeScatDetails'
    _name.category_id            scat
    _name.object_id              source
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case   'International Tables Vol. IV Table 2.4.6B'
     save_
 
 
save_atom_type_scat.symbol
    _definition.id             '_atom_type_scat.symbol'
     loop_
    _alias.definition_id       '_atom_type_scat_symbol'
    _definition.update           2013-01-23
    _description.text
;
     The identity of the atom specie(s) representing this atom type.
     See _atom_type.symbol for further details.
;
    _description.common         'AtomTypeScatSymbol'
    _name.category_id            scat
    _name.object_id              symbol
    _name.linked_item_id       '_atom_type.symbol'
    _type.purpose                Quantity
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     save_
 
 
save_atom_type_scat.versus_stol_list
    _definition.id             '_atom_type_scat.versus_stol_list'
     loop_
    _alias.definition_id       '_atom_type_scat_versus_stol_list'
                               '_atom_type.scat_versus_stol_list'
    _definition.update           2013-01-21
    _description.text
;
     Table of scattering factors as a function of sin theta on lambda.
     Table has the form ['<stol value as key>':'<scatfac>', ....]
     in increments of 0.01, increasing from 0.0.
;
    _description.common         'AtomTypeScatTable'
    _name.category_id            scat
    _name.object_id              versus_stol_list
    _type.purpose                Quantity
    _type.source                 Assigned 
    _type.container              List 
    _type.contents              List([Real,Real])
     save_

     save_    #------ close ATOM_TYPE_SCAT category

     save_    #------ close ATOM_TYPE category

     save_    #------ close ATOM category
 
#============================================================================
 
save_REFINE
 
    _definition.id               REFINE
    _definition.scope            Category
    _definition.class            Set
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to specify information about the
     refinement of the structural model.
;
    _name.category_id            STRUCTURE
    _name.object_id              REFINE
 
save_refine.special_details
    _definition.id             '_refine.special_details'
     loop_
    _alias.definition_id       '_refine_special_details'
    _definition.update           2012-11-20
    _description.text
;
     Details of the refinement not specified by other data items.
;
    _description.common         'RefinementDetails'
    _name.category_id            refine
    _name.object_id              special_details
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     save_
 
#----------------------------------------------------------------------------
 
save_REFINE_DIFF
 
    _definition.id               REFINE_DIFF
    _definition.scope            Category
    _definition.class            Set
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items which specify the electron density limits
     in a difference Fourier map after the structure has been refined. The
     rms value is with respect to the arithmetic mean density, and is derived
     from summations over each grid point in the asymmetric unit of the cell.
;
    _name.category_id            REFINE     
    _name.object_id              DIFF
 
 
save_refine_diff.density_max
    _definition.id             '_refine_diff.density_max'
     loop_
    _alias.definition_id       '_refine_diff_density_max'
                               '_refine.diff_density_max'
    _definition.update           2012-11-20
    _description.text
;
     Maximum density value in a difference Fourier map.
;
    _description.common         'RefineDiffDensMax'
    _name.category_id            refine_diff
    _name.object_id              density_max
    _type.purpose                Quantity
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
     loop_
    _method.purpose
    _method.expression
     Definition
;
         If (_diffrn_radiation.probe == "neutron")  _units.code =  "femtometres"
    Else If (_diffrn_radiation.probe == "electron") _units.code =  "volts"
    Else                                            _units.code =  "electrons"
;
     save_
 
 
save_refine_diff.density_min
    _definition.id             '_refine_diff.density_min'
     loop_
    _alias.definition_id       '_refine_diff_density_min'
                               '_refine.diff_density_min'
    _definition.update           2012-11-20
    _description.text
;
     Miniumum density value in a difference Fourier map.
;
    _description.common         'RefineDiffDensMin'
    _name.category_id            refine_diff
    _name.object_id              density_min
    _type.purpose                Quantity
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
     loop_
    _method.purpose
    _method.expression
     Definition
;
         If (_diffrn_radiation.probe == "neutron")  _units.code =  "femtometres"
    Else If (_diffrn_radiation.probe == "electron") _units.code =  "volts"
    Else                                            _units.code =  "electrons"
;
     save_
 
 
save_refine_diff.density_rms
    _definition.id             '_refine_diff.density_rms'
     loop_
    _alias.definition_id       '_refine_diff_density_rms'
                               '_refine.diff_density_rms'
    _definition.update           2012-11-20
    _description.text
;
     Root mean square density value in a difference Fourier map.
     This value is measured with respect to the arithmetic mean 
     density and is derived from summations over each grid point 
     in the asymmetric unit of the cell. This quantity is useful 
     for assessing the significance of *_min and *_max values, 
     and also for defining suitable contour levels.
;
    _description.common         'RefineDiffDensRms'
    _name.category_id            refine_diff
    _name.object_id              density_rms
    _type.purpose                Quantity
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
     loop_
    _method.purpose
    _method.expression
     Definition
;
         If (_diffrn_radiation.probe == "neutron")  _units.code =  "femtometres"
    Else If (_diffrn_radiation.probe == "electron") _units.code =  "volts"
    Else                                            _units.code =  "electrons"
;
     save_

     save_    #------ close REFINE_DIFF category
 
#----------------------------------------------------------------------------
 
save_REFINE_LS
 
    _definition.id               REFINE_LS
    _definition.scope            Category
    _definition.class            Set
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to specify information about the
     refinement of the structural model.
;
    _name.category_id            REFINE    
    _name.object_id              LS  
 
 
save_refine_ls.abs_structure_details
    _definition.id             '_refine_ls.abs_structure_details'
     loop_
    _alias.definition_id       '_refine_ls_abs_structure_details'
                               '_refine.ls_abs_structure_details'
    _definition.update           2012-11-20
    _description.text
;
     Details on the absolute structure and how it was determined.
;
    _description.common         'RefineAbsStructDetails'
    _name.category_id            refine_ls
    _name.object_id              abs_structure_details
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     save_
 
 
save_refine_ls.abs_structure_Flack
    _definition.id             '_refine_ls.abs_structure_Flack'
     loop_
    _alias.definition_id       '_refine_ls_abs_structure_Flack'
                               '_refine.ls_abs_structure_Flack'
    _definition.update           2012-11-20
    _description.text
;
     The measure of absolute structure as defined by Flack (1983).
     For centrosymmetric structures, the only permitted value, if the
     data name is present, is 'inapplicable', represented by '.' .
     For noncentrosymmetric structures, the value must lie in the
     99.97% Gaussian confidence interval  -3u =< x =< 1 + 3u and a
     standard uncertainty (e.s.d.) u must be supplied. The
     _enumeration.range of 0.0:1.0 is correctly interpreted as
     meaning (0.0 - 3u) =< x =< (1.0 + 3u).
     Ref: Flack, H. D. (1983). Acta Cryst. A39, 876-881.
;
    _description.common         'RefineAbsStructFlack'
    _name.category_id            refine_ls
    _name.object_id              abs_structure_Flack
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:1.0
     save_
 
 
save_refine_ls.abs_structure_Rogers
    _definition.id             '_refine_ls.abs_structure_Rogers'
     loop_
    _alias.definition_id       '_refine_ls_abs_structure_Rogers'
                               '_refine.ls_abs_structure_Rogers'
    _definition.update           2012-11-20
    _description.text
;
     The measure of absolute structure as defined by Rogers (1981).
     The value must lie in the 99.97% Gaussian confidence interval
     -1 -3u =< \h =< 1 + 3u and a standard uncertainty (e.s.d.) u must
     be supplied. The _enumeration.range of -1.0:1.0 is correctly
     interpreted as meaning (-1.0 - 3u) =< \h =< (1.0 + 3u).
     Ref: Rogers, D. (1981). Acta Cryst. A37, 734-741.
;
    _description.common         'RefineAbsStructRogers'
    _name.category_id            refine_ls
    _name.object_id              abs_structure_Rogers
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           -1.0:1.0
     save_
 
 
save_refine_ls.d_res_high
    _definition.id             '_refine_ls.d_res_high'
     loop_
    _alias.definition_id       '_refine_ls_d_res_high'
                               '_refine.ls_d_res_high'
    _definition.update           2012-11-20
    _description.text
;
     Highest resolution for the reflections used in refinement.
     This corresponds to the smallest interpanar d value.
;
    _description.common         'RefineResolutionHigh'
    _name.category_id            refine_ls
    _name.object_id              d_res_high
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms 
     save_
 
 
save_refine_ls.d_res_low
    _definition.id             '_refine_ls.d_res_low'
     loop_
    _alias.definition_id       '_refine_ls_d_res_low'
                               '_refine.ls_d_res_low'
    _definition.update           2012-11-20
    _description.text
;
     Lowest resolution for the reflections used in refinement.
     This corresponds to the largest interpanar d value.
;
    _description.common         'RefineResolutionLow'
    _name.category_id            refine_ls
    _name.object_id              d_res_low
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms 
     save_
 
 
save_refine_ls.extinction_coef
    _definition.id             '_refine_ls.extinction_coef'
     loop_
    _alias.definition_id       '_refine_ls_extinction_coef'
                               '_refine.ls_extinction_coef'
    _definition.update           2012-11-20
    _description.text
;
     The extinction coefficient used to calculate the correction
     factor applied to the structure-factor data. The nature of the
     extinction coefficient is given in the definitions of
     _refine_ls.extinction_expression and _refine_ls.extinction_method.
     For the 'Zachariasen' method it is the r* value; for the
     'Becker-Coppens type 1 isotropic' method it is the 'g' value.
     For 'Becker-Coppens type 2 isotropic' corrections it is
     the 'rho' value. Note that the magnitude of these values is
     usually of the order of 10000.
     Ref:  Becker, P. J. & Coppens, P. (1974). Acta Cryst. A30,
           129-147, 148-153.
           Zachariasen, W. H. (1967). Acta Cryst. 23, 558-564.
           Larson, A. C. (1967). Acta Cryst. 23, 664-665.
;
    _description.common         'RefineExtinctionCoeff'
    _name.category_id            refine_ls
    _name.object_id              extinction_coef
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
     loop_
    _description_example.case     
    _description_example.detail  
            3472(52)    'Zachariasen coefficient r* = 0.347(5) E04'
     save_
 
 
save_refine_ls.extinction_expression
    _definition.id             '_refine_ls.extinction_expression'
     loop_
    _alias.definition_id       '_refine_ls_extinction_expression'
                               '_refine.ls_extinction_expression'
    _definition.update           2012-11-20
    _description.text
;
     Description of or reference to the extinction-correction equation 
     used to apply the data item  _refine_ls.extinction_coef. This 
     information should be sufficient to reproduce the extinction-
     correction factors applied to the structure factors.
;
    _description.common         'RefineExtinctionExpression'
    _name.category_id            refine_ls
    _name.object_id              extinction_expression
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case
    _description_example.detail   'Larson approach'
;      Larson, A. C. (1970). "Crystallographic Computing", edited by
              F. R. Ahmed. Eq. (22) p. 292.  Copenhagen: Munksgaard.
;
     save_
 
 
save_refine_ls.extinction_method
    _definition.id             '_refine_ls.extinction_method'
     loop_
    _alias.definition_id       '_refine_ls_extinction_method'
                               '_refine.ls_extinction_method'
    _definition.update           2012-11-20
    _description.text
;
     Description of the extinction correction method applied with the 
     data item _refine_ls.extinction_coef. This description should 
     include information about the correction method, either 'Becker-
     Coppens' or 'Zachariasen'. The latter is sometimes referred to as 
     the 'Larson' method even though it employs Zachariasen's formula.
 
     The Becker-Coppens procedure is referred to as 'type 1' when 
     correcting secondary extinction dominated by the mosaic spread; 
     as 'type 2' when secondary extinction is dominated by particle 
     size and includes a primary extinction component; and as 'mixed' 
     when there are types 1 and 2.
 
     For the Becker-Coppens method it is also necessary to set the 
     mosaic distribution as either 'Gaussian' or 'Lorentzian'; and the 
     nature of the extinction as 'isotropic' or 'anisotropic'. Note 
     that if either the 'mixed' or 'anisotropic' corrections are applied 
     the multiple coefficients cannot be contained in the 
     _refine_ls.extinction_coef and must be listed in *.special_details.
 
     Ref:  Becker, P. J. & Coppens, P. (1974). Acta Cryst. A30, 129-153.
           Zachariasen, W. H. (1967). Acta Cryst. 23, 558-564.
           Larson, A. C. (1967). Acta Cryst. 23, 664-665.
;
    _description.common         'RefineExtinctionMethod'
    _name.category_id            refine_ls
    _name.object_id              extinction_method
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case   Zachariasen
                               'B-C type 2 Gaussian isotropic'
     save_
 

save_refine_ls.F_calc_details
    _definition.id             '_refine_ls.F_calc_details'
     loop_
    _alias.definition_id       '_refine_ls_F_calc_details'
    _definition.update           2013-01-21
    _description.text 
;
     Details concerning the evaluation of the structure factors 
     using the expression given in _refine_ls.F_calc_formula.
;
    _name.category_id            refine_ls
    _name.object_id              F_calc_details
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case 'Gaussian integration using 16 points'
                           ''' Bessel functions expansion up to 5th 
                               order. estimated accuracy of Bessel
                               function  better than 0.001 electrons'''
     save_


save_refine_ls.F_calc_formula
    _definition.id             '_refine_ls.F_calc_formula'
     loop_
    _alias.definition_id       '_refine_ls_F_calc_formula'
    _definition.update           2013-01-23
    _description.text
;
     Analytical expression used to calculate the structure factors.
;
    _name.category_id            refine_ls
    _name.object_id              F_calc_formula
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     save_


save_refine_ls.F_calc_precision
    _definition.id             '_refine_ls.F_calc_precision'
     loop_
    _alias.definition_id       '_refine_ls_F_calc_precision'
    _definition.update           2013-01-21
    _description.text
;
     Estimate of the precision resulting from the numerical 
     approximations made during the evaluation of the structure 
     factors using the expression _refine_ls.F_calc_formula 
     following the method outlined in _refine_ls.F_calc_details.
;
    _name.category_id            refine_ls
    _name.object_id              F_calc_precision
    _type.purpose                Measurand
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     loop_
    _method.purpose
    _method.expression
     Definition
;
         If (_diffrn_radiation.probe == "neutron")  _units.code =  "femtometres"
    Else If (_diffrn_radiation.probe == "electron") _units.code =  "volts"
    Else                                            _units.code =  "electrons"
;
     save_

 
save_refine_ls.goodness_of_fit_all
    _definition.id             '_refine_ls.goodness_of_fit_all'
     loop_
    _alias.definition_id       '_refine_ls_goodness_of_fit_all'
                               '_refine.ls_goodness_of_fit_all'
    _definition.update           2012-11-20
    _description.text
;
     Least-squares goodness-of-fit parameter S for all reflections after
     the final cycle of refinement. Ideally, account should be taken of
     parameters restrained in the least squares.

              {  sum { w [ Y(meas) - Y(calc) ]^2^ }  }^1/2^
          S = { ------------------------------------ }
              {            Nref - Nparam             }

          Y(meas) = the measured coefficients
                    (see _refine_ls.structure_factor_coef)
          Y(calc) = the calculated coefficients
                    (see _refine_ls.structure_factor_coef)
          w       = the least-squares reflection weight
                    [1/(u^2^)]
          u       = standard uncertainty
          Nref   = the number of reflections used in the refinement
          Nparam = the number of refined parameters
          and the sum is taken over the specified reflections
;
    _description.common         'RefineLsGofAllReflns'
    _name.category_id            refine_ls
    _name.object_id              goodness_of_fit_all
    _type.purpose                Measurand
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.goodness_of_fit_gt
    _definition.id             '_refine_ls.goodness_of_fit_gt'
    loop_
    _alias.definition_id       '_refine_ls_goodness_of_fit_gt'
                               '_refine_ls_goodness_of_fit_obs'
                               '_refine.ls_goodness_of_fit_obs'
    _definition.update           2012-11-20
    _description.text
;
     Least-squares goodness-of-fit parameter S for significantly 
     intense reflections, (i.e. 'observed' reflections with values
     greater-than the threshold set in _reflns.threshold_expression), 
     after the final cycle. Ideally, account should be taken of 
     parameters restrained in the least-squares refinement.

              {  sum { w [ Y(meas_gt) - Y(calc) ]^2^ }  }^1/2^
          S = { --------------------------------------- }
              {           Nref - Nparam                 }   

          Y(meas_gt)  = the 'observed' coefficients
                    (see _refine_ls.structure_factor_coef)
          Y(calc)     = the calculated coefficients
                    (see _refine_ls.structure_factor_coef)
          w       = the least-squares reflection weight
                    [1/(u^2^)]
          u       = standard uncertainty
          Nref   = the number of reflections used in the refinement
          Nparam = the number of refined parameters
          and the sum is taken over the specified reflections
;
    _description.common         'RefineLsGofGtReflns'
    _name.category_id            refine_ls
    _name.object_id              goodness_of_fit_gt
    _type.purpose                Measurand
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.goodness_of_fit_ref
    _definition.id             '_refine_ls.goodness_of_fit_ref'
    loop_
    _alias.definition_id       '_refine_ls_goodness_of_fit_ref'
    _definition.update           2012-11-20
    _description.text
;
     Least-squares goodness-of-fit parameter S for those reflections 
     included in the final cycle of refinement. Account should be 
     taken of restrained parameters.

              {  sum { w [ Y(meas) - Y(calc) ]^2^ }  }^1/2^
          S = { ------------------------------------ }
              {            Nref - Nparam             }

          Y(meas) = the measured coefficients
                    (see _refine_ls.structure_factor_coef)
          Y(calc) = the calculated coefficients
                    (see _refine_ls.structure_factor_coef)
          w       = the least-squares reflection weight
                    [1/(u^2^)]
          u       = standard uncertainty
          Nref   = the number of reflections used in the refinement
          Nparam = the number of refined parameters
          and the sum is taken over the specified reflections
;
    _description.common         'RefineLsGofRefineReflns'
    _name.category_id            refine_ls
    _name.object_id              goodness_of_fit_ref
    _type.purpose                Measurand
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.hydrogen_treatment
    _definition.id             '_refine_ls.hydrogen_treatment'
     loop_
    _alias.definition_id       '_refine_ls_hydrogen_treatment'
                               '_refine.ls_hydrogen_treatment'
    _definition.update           2012-11-20
    _description.text
;
     Code identifying how hydrogen atoms were treated in the refinement.
;
    _description.common         'RefineLsHatomTreatment'
    _name.category_id            refine_ls
    _name.object_id              hydrogen_treatment
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail
      refall  'refined all H-atom parameters'
      refxyz  'refined H-atom coordinates only'
      refU    'refined H-atom U's only'
      noref   'no refinement of H-atom parameters'
      constr  'H-atom parameters constrained'
      hetero
            '''H-atom parameters constrained for H on C, all 
               H-atom parameters refined for H on heteroatoms'''
      heteroxyz
            '''H-atom parameters constrained for H on C, refined
               H-atom coordinates only for H on heteroatoms'''
      heteroU
            '''H-atom parameters constrained for H on C, refined 
               H-atom U's only for H on heteroatoms'''
      heteronoref
            '''H-atom parameters constrained for H on C, no 
               refinement of H-atom parameters for H on heteroatoms'''
      hetero-mixed
            '''H-atom parameters constrained for H on C and some 
               heteroatoms, all H-atom parameters refined
               for H on remaining heteroatoms'''
      heteroxyz-mixed
            '''H-atom parameters constrained for H on C and some 
               heteroatoms, refined H-atom coordinates only
               for H on remaining heteroatoms'''
      heteroU-mixed
            '''H-atom parameters constrained for H on C and some 
               heteroatoms, refined H-atom U's only for H on 
               remaining heteroatoms'''
      heteronoref-mixed
            '''H-atom parameters constrained for H on C and some 
               heteroatoms, no refinement of H-atom parameters
               for H on remaining heteroatoms'''
      mixed   'some constrained, some independent'
      undef   'H-atom parameters not defined'
    _enumeration.default         undef
     save_
 
 
save_refine_ls.matrix_type
    _definition.id             '_refine_ls.matrix_type'
     loop_
    _alias.definition_id       '_refine_ls_matrix_type'
                               '_refine.ls_matrix_type'
    _definition.update           2012-11-20
    _description.text
;
     Code identifying the matrix type used for least-squares derivatives.
;
    _description.common         'RefineLsMatrixType'
    _name.category_id            refine_ls
    _name.object_id              matrix_type
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail      full       'full'
                                 fullcycle  'full with fixed elements per cycle'
                                 atomblock  'block diagonal per atom'
                                 userblock  'user-defined blocks'
                                 diagonal   'diagonal elements only'
                                 sparse     'selected elements only'
    _enumeration.default         full
     save_
 
 
save_refine_ls.number_constraints
    _definition.id             '_refine_ls.number_constraints'
     loop_
    _alias.definition_id       '_refine_ls_number_constraints'
                               '_refine.ls_number_constraints'
    _definition.update           2012-11-20
    _description.text
;    
     Number of constrained (non-refined or dependent) parameters
     in the least-squares process. These may be due to symmetry or any
     other constraint process (e.g. rigid-body refinement). See also
     _atom_site.constraints and _atom_site.refinement_flags. A general
     description of constraints may appear in _refine.special_details.
;
    _description.common         'RefineLsConstraintsCount'
    _name.category_id            refine_ls
    _name.object_id              number_constraints
    _type.purpose                Quantity
    _type.source                 Observed
    _type.container              Single
    _type.contents               Count
    _enumeration.range           0:
    _enumeration.default         0
     save_
 
 
save_refine_ls.number_parameters
    _definition.id             '_refine_ls.number_parameters'
     loop_
    _alias.definition_id       '_refine_ls_number_parameters'
                               '_refine.ls_number_parameters'
    _definition.update           2012-11-20
    _description.text
;
     Number of parameters refined in the least-squares process. If 
     possible this number should include the restrained parameters. 
     The restrained parameters are distinct from the constrained 
     parameters (where one or more parameters are linearly dependent 
     on the refined value of another).  Least-squares restraints 
     often depend on geometry or energy considerations and this 
     makes their direct contribution to this number, and to the 
     goodness-of-fit calculation, difficult to assess.
;
    _description.common         'RefineLsParametersCount'
    _name.category_id            refine_ls
    _name.object_id              number_parameters
    _type.purpose                Quantity
    _type.source                 Observed
    _type.container              Single
    _type.contents               Count
    _enumeration.range           0:
     save_
 
 
save_refine_ls.number_reflns
    _definition.id             '_refine_ls.number_reflns'
     loop_
    _alias.definition_id       '_refine_ls_number_reflns'
                               '_refine.ls_number_reflns_all'
    _definition.update           2012-11-20
    _description.text
;
     Number of unique reflections used in the least-squares refinement.
;
    _description.common         'RefineLsReflectionsCount'
    _name.category_id            refine_ls
    _name.object_id              number_reflns
    _type.purpose                Quantity
    _type.source                 Observed
    _type.container              Single
    _type.contents               Count
    _enumeration.range           1:
     save_
 
 
save_refine_ls.number_restraints
    _definition.id             '_refine_ls.number_restraints'
     loop_
    _alias.definition_id       '_refine_ls_number_restraints'
                               '_refine.ls_number_restraints'
    _definition.update           2012-11-20
    _description.text
;
     Number of restrained parameters in the least-squares refinement. These
     parameters do not directly dependent on another refined parameter. Often
     restrained parameters involve geometry or energy dependencies. See also
     _atom_site.constraints and _atom_site.refinement_flags. A description
     of refinement constraints may appear in _refine.special_details.
;
    _description.common         'RefineLsConstraintsCount'
    _name.category_id            refine_ls
    _name.object_id              number_restraints
    _type.purpose                Quantity
    _type.source                 Observed
    _type.container              Single
    _type.contents               Count
    _enumeration.range           0:
     save_
 
 
save_refine_ls.R_factor_all
    _definition.id             '_refine_ls.R_factor_all'
     loop_
    _alias.definition_id       '_refine_ls_R_factor_all'
                               '_refine.ls_R_factor_all'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor for all reflections satisfying the resolution limits
     specified by _refine_ls.d_res_high and _refine_ls.d_res_low. This is
     the conventional R factor. See also wR factor definitions.
 
                   sum | F(meas) - F(calc) |
               R = ------------------------
                         sum | F(meas) |
 
               F(meas) = the measured structure-factor amplitudes
               F(calc) = the calculated structure-factor amplitudes
               and the sum is taken over the specified reflections
;
    _description.common         'RefineLsResid(F)AllReflns'
    _name.category_id            refine_ls
    _name.object_id              R_factor_all
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.R_factor_gt
    _definition.id             '_refine_ls.R_factor_gt'
    loop_
    _alias.definition_id       '_refine_ls_R_factor_obs'
                               '_refine_ls_R_factor_gt'
                               '_refine.ls_R_factor_obs'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor for the reflections judged significantly intense
     (see _reflns.number_gt and _reflns.threshold_expression) and included
     in the refinement. The reflections also satisfy the resolution limits
     specified by _refine_ls.d_res_high and _refine_ls.d_res_low. This is
     the conventional R factor.

                   sum | F(meas_gt) - F(calc) |
               R = -----------------------------
                         sum | F(meas_gt) |

               F(meas_gt) = the 'observed' structure-factor amplitudes
               F(calc)    = the calculated structure-factor amplitudes
               and the sum is taken over the specified reflections
;
    _description.common         'RefineLsResid(F)GtReflns'
    _name.category_id            refine_ls
    _name.object_id              R_factor_gt
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.R_Fsqd_factor
    _definition.id             '_refine_ls.R_Fsqd_factor'
     loop_
    _alias.definition_id       '_refine_ls_R_Fsqd_factor'
                               '_refine.ls_R_Fsqd_factor_obs'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor R(Fsqd), calculated on the squared amplitudes of the
     measured and calculated structure factors, for significantly intense
     reflections (satisfying _reflns.threshold_expression) and included in
     the refinement. The reflections also satisfy the resolution limits
     specified by _refine_ls.d_res_high and _refine_ls.d_res_low.
 
                          sum | F(meas_gt)^2^ - F(calc)^2^ |
               R(Fsqd) = ------------------------------------
                                  sum F(meas_gt)^2^
 
               F(meas_gt)^2^ = squares of the 'observed' structure-factor
               F(calc)^2^    = squares of the calculated structure-factor
               and the sum is taken over the specified reflections
;
    _description.common         'RefineLsResid(Fsqd)GtReflns'
    _name.category_id            refine_ls
    _name.object_id              R_Fsqd_factor
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.R_I_factor
    _definition.id             '_refine_ls.R_I_factor'
     loop_
    _alias.definition_id       '_refine_ls_R_I_factor'
                               '_refine.ls_R_I_factor_obs'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor R(I) for significantly intense reflections (satisfying
     _reflns.threshold_expression) and included in the refinement. This is
     most often calculated in Rietveld refinements of powder data, where it
     is referred to as R~B~ or R~Bragg~.
 
                       sum | I(meas_gt) - I(calc) |
               R(I) =  -----------------------------
                              sum | I(meas_gt) |
 
               I(meas_gt) = the net 'observed' intensities
               I(calc)    = the net calculated intensities
               and the sum is taken over the specified reflections
;
    _description.common         'RefineLsResid(I)GtReflns'
    _name.category_id            refine_ls
    _name.object_id              R_I_factor
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.restrained_S_all
    _definition.id             '_refine_ls.restrained_S_all'
     loop_
    _alias.definition_id       '_refine_ls_restrained_S_all'
                               '_refine.ls_restrained_S_all'
    _definition.update           2012-11-20
    _description.text
;
     Least-squares goodness-of-fit parameter S' for all reflections after
     the final cycle of least squares. This parameter explicitly includes
     the restraints applied in the least-squares process. See also
     _refine_ls.goodness_of_fit_all definition.
 
            {sum { w [ Y(meas) - Y(calc) ]^2^ }                  }^1/2^
            {         + sum~r~ { w~r~ [ P(calc) - P(targ) ]^2^ } }
       S' = { -------------------------------------------------- }
            {            N~ref~ + N~restr~ - N~param~            }
 
               Y(meas)  = the measured coefficients
                          (see _refine_ls.structure_factor_coef)
               Y(calc)  = the calculated coefficients
                          (see _refine_ls.structure_factor_coef)
               w        = the least-squares reflection weight
                          [1/square of standard uncertainty (e.s.d.)]
               P(calc)  = the calculated restraint values
               P(targ)  = the target restraint values
               w~r~     = the restraint weight
 
               N~ref~   = the number of reflections used in the refinement
                        (see _refine_ls.number_reflns)
               N~restr~ = the number of restraints
                        (see _refine_ls.number_restraints)
               N~param~ = the number of refined parameters
                        (see _refine_ls.number_parameters)
 
               sum     is taken over the specified reflections
               sum~r~  is taken over the restraints
;
    _description.common         'RefineLsGofRestrainedAllReflns'
    _name.category_id            refine_ls
    _name.object_id              restrained_S_all
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.restrained_S_gt
    _definition.id             '_refine_ls.restrained_S_gt'
    loop_
    _alias.definition_id       '_refine_ls_restrained_S_obs'
                               '_refine_ls_restrained_S_gt'
                               '_refine.ls_restrained_S_obs'
    _definition.update           2012-11-20
    _description.text
;
     Least-squares goodness-of-fit parameter S' for significantly intense
     reflections (satisfying _reflns.threshold_expression) after the final
     cycle of least squares. This parameter explicitly includes the restraints
     applied. The expression for S' is given in _refine_ls.restrained_S_all.

            {sum { w [ Y(meas_gt) - Y(calc) ]^2^ }               }^1/2^
            {         + sum~r~ { w~r~ [ P(calc) - P(targ) ]^2^ } }
       S' = { -------------------------------------------------- }
            {            N~ref~ + N~restr~ - N~param~            }

               Y(meas_gt) = the 'observed' coefficients
                          (see _refine_ls.structure_factor_coef)
               Y(calc)    = the calculated coefficients
                          (see _refine_ls.structure_factor_coef)
               w        = the least-squares reflection weight
                          [1/square of standard uncertainty (e.s.d.)]
               P(calc)  = the calculated restraint values
               P(targ)  = the target restraint values
               w~r~     = the restraint weight

               N~ref~   = the number of reflections used in the refinement
                        (see _refine_ls.number_reflns)
               N~restr~ = the number of restraints
                        (see _refine_ls.number_restraints)
               N~param~ = the number of refined parameters
                        (see _refine_ls.number_parameters)

               sum     is taken over the specified reflections
               sum~r~  is taken over the restraints
;
    _description.common         'RefineLsGofRestrainedGtReflns'
    _name.category_id            refine_ls
    _name.object_id              restrained_S_gt
    _type.purpose                Measurand
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.shift_over_su_max
    _definition.id             '_refine_ls.shift_over_su_max'
     loop_
    _alias.definition_id       '_refine_ls_shift_over_su_max'
                               '_refine.ls_shift_over_esd_max'
                               '_refine_ls_shift/su_max'
                               '_refine_ls_shift/esd_max'
    _definition.update           2012-11-20
    _description.text
;
     The largest ratio of the final least-squares parameter shift 
     to the final standard uncertainty (s.u., formerly described 
     as estimated standard deviation, e.s.d.).
;
    _description.common         'RefineLsMaxShift/Su'
    _name.category_id            refine_ls
    _name.object_id              shift_over_su_max
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 

save_refine_ls.shift_over_su_max_lt
    _definition.id             '_refine_ls.shift_over_su_max_lt'
     loop_
    _alias.definition_id       '_refine_ls_shift/su_max_lt'
    _definition.update           2012-12-11
    _description.text
;
     Upper limit for the largest ratio of the final l-s parameter 
     shift divided by the final standard uncertainty. This item is 
     used when the largest value of the shift divided by the final 
     standard uncertainty is too small to measure.
;
    _name.category_id            refine_ls
    _name.object_id              shift_over_su_max_lt
    _type.purpose                Quantity
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_

 
save_refine_ls.shift_over_su_mean
    _definition.id             '_refine_ls.shift_over_su_mean'
     loop_
    _alias.definition_id       '_refine_ls_shift_over_su_mean'
                               '_refine.ls_shift_over_esd_mean'
                               '_refine_ls_shift/su_mean'
                               '_refine_ls_shift/esd_mean'
    _definition.update           2012-11-20
    _description.text
;
     The average ratio of the final least-squares parameter shift 
     to the final standard uncertainty (s.u., formerly described 
     as estimated standard deviation, e.s.d.).
;
    _description.common         'RefineLsMeanShift/Su'
    _name.category_id            refine_ls
    _name.object_id              shift_over_su_mean
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 

save_refine_ls.shift_over_su_mean_lt
    _definition.id             '_refine_ls.shift_over_su_mean_lt'
     loop_
    _alias.definition_id       '_refine_ls_shift/su_mean_lt'
    _definition.update           2012-12-11
    _description.text
;    
     Upper limit for the average ratio of the final l-s parameter
     shift divided by the final standard uncertainty. This item is 
     used when the average value of the shift divided by the final 
     standard uncertainty is too small to measure.
;   
    _name.category_id            refine_ls
    _name.object_id              shift_over_su_mean_lt
    _type.purpose                Quantity
    _type.source                 Derived
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_


save_refine_ls.structure_factor_coef
    _definition.id             '_refine_ls.structure_factor_coef'
     loop_
    _alias.definition_id       '_refine_ls_structure_factor_coef'
                               '_refine.ls_structure_factor_coef'
    _definition.update           2012-11-20
    _description.text
;
     Structure-factor coefficient used in the least-squares process.
;
    _description.common         'RefineLsStructFactorCoeff'
    _name.category_id            refine_ls
    _name.object_id              structure_factor_coef
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail      F      'structure factor magnitude'
                                 Fsqd   'structure factor squared'
                                 Inet   'net intensity'
    _enumeration.default         F
     save_
 
 
save_refine_ls.weighting_details
    _definition.id             '_refine_ls.weighting_details'
     loop_
    _alias.definition_id       '_refine_ls_weighting_details'
                               '_refine.ls_weighting_details'
    _definition.update           2012-11-20
    _description.text
;
     Description of special aspects of the weighting scheme used in the
     least-squares refinement. Used to describe the weighting when the
     value of _refine_ls.weighting_scheme is specified as 'calc'.
;
    _description.common         'RefineLsWeightDetails'
    _name.category_id            refine_ls
    _name.object_id              weighting_details
    _type.purpose                Describe
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Text
     loop_
    _description_example.case
;
        Sigdel model of Konnert-Hendrickson:
         Sigdel = Afsig +  Bfsig*(sin(\q)/\l - 1/6)
         Afsig  = 22.0, Bfsig = 150.0 at the beginning of refinement.
         Afsig  = 16.0, Bfsig =  60.0 at the end of refinement.
;
     save_
 
 
save_refine_ls.weighting_scheme
    _definition.id             '_refine_ls.weighting_scheme'
     loop_
    _alias.definition_id       '_refine_ls_weighting_scheme'
                               '_refine.ls_weighting_scheme'
    _definition.update           2012-11-20
    _description.text
;
     General description of the weighting scheme used in the least-squares.
     An enumerated code should be contained in this description.
;
    _description.common         'RefineLsWeightCode'
    _name.category_id            refine_ls
    _name.object_id              weighting_scheme
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail      sigma    "based on measured s.u.'s"
                                 unit     'unit or no weights applied'
                                 calc     'calculated weights applied'
    _enumeration.default         sigma  
     save_
 
 
save_refine_ls.wR_factor_all
    _definition.id             '_refine_ls.wR_factor_all'
     loop_
    _alias.definition_id       '_refine_ls_wR_factor_all'
                               '_refine.ls_wR_factor_all'
    _definition.update           2012-11-20
    _description.text
;
     Weighted residual factors for all reflections satisfying the resolution
     limits specified by _refine_ls.d_res_high and _refine_ls.d_res_low.
     See also the _refine_ls.R_factor_all definition.
 
            ( sum w [ Y(meas) - Y(calc) ]^2^ )^1/2^
       wR = ( ------------------------------ )
            (         sum w Y(meas)^2^       )
 
       Y(meas) = the measured   amplitude _refine_ls.structure_factor_coef
       Y(calc) = the calculated amplitude _refine_ls.structure_factor_coef
       w       = the least-squares weight
       and the sum is taken over the specified reflections
;
    _description.common         'RefineLsWResidAllReflns'
    _name.category_id            refine_ls
    _name.object_id              wR_factor_all
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.wR_factor_gt
    _definition.id             '_refine_ls.wR_factor_gt'
    loop_
    _alias.definition_id       '_refine_ls_wR_factor_obs'
                               '_refine.ls_wR_factor_obs'
                               '_refine_ls_wR_factor_gt'
    _definition.update           2012-11-20
    _description.text
;
     Weighted residual factors for significantly intense reflections
     (satisfying @reflns_threshold_expression) included in the refinement.
     The reflections must also satisfy the resolution limits established by
     _refine_ls.d_res_high and _refine_ls.d_res_low.

            ( sum w [ Y(meas_gt) - Y(calc) ]^2^  )^1/2^
       wR = ( ---------------------------------- )
            (         sum w Y(meas_gt)^2^        )

     Y(meas_gt) = the 'observed' amplitude _refine_ls.structure_factor_coef
     Y(calc)    = the calculated amplitude _refine_ls.structure_factor_coef
       w       = the least-squares weight
       and the sum is taken over the specified reflections
;
    _description.common         'RefineLsWResidGtReflns'
    _name.category_id            refine_ls
    _name.object_id              wR_factor_gt
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls.wR_factor_ref
    _definition.id             '_refine_ls.wR_factor_ref'
    loop_
    _alias.definition_id       '_refine_ls_wR_factor_ref'
    _definition.update           2012-11-20
    _description.text
;
     Weighted residual factors for reflections included in the refinement
     which satisfy the limits specified by _refine_ls.d_res_high and
     _refine_ls.d_res_low.

            ( sum w [ Y(meas) - Y(calc) ]^2^ )^1/2^
       wR = ( ------------------------------ )
            (         sum w Y(meas)^2^       )

       Y(meas) = the measured   amplitude _refine_ls.structure_factor_coef
       Y(calc) = the calculated amplitude _refine_ls.structure_factor_coef
       w       = the least-squares weight
       and the sum is taken over the specified reflections
;
    _description.common         'RefineLsWResidRefineReflns'
    _name.category_id            refine_ls
    _name.object_id              wR_factor_ref
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
#----------------------------------------------------------------------------
 
save_REFINE_LS_CLASS
 
    _definition.id               REFINE_LS_CLASS
    _definition.scope            Category
    _definition.class            Loop
    _definition.update           2012-11-20
    _description.text
;
     The CATEGORY of data items used to specify information about the
     refinement of the structural model.
;
    _name.category_id            REFINE_LS 
    _name.object_id              CLASS
    _category.key_id           '_refine_ls_class.key'
 
 
save_refine_ls_class.key
    _definition.id             '_refine_ls_class.key'
    _definition.update           2012-11-20
    _description.text
;
     Value is a unique key to a set of REFINE_LS_CLASS items
     in a looped list.
;
    _description.common         'Key to ls refinement data'  
    _name.category_id            refine_ls_class
    _name.object_id              key
    _type.purpose                Key
    _type.source                 Assembled
    _type.container              Single
    loop_
    _method.purpose
    _method.expression
     Definition
;              _type.contents = Type_Contents(refine_ls_class.code)
;
     Evaluation
;              _refine_ls_class.key = _refine_ls_class.code
;
     save_
 
 
save_refine_ls_class.code
    _definition.id             '_refine_ls_class.code'
     loop_
    _alias.definition_id       '_refine_ls_class_code'
    _definition.update           2012-11-20
    _description.text
;
     Code identifying a certain reflection class.
;
    _description.common         'LsShellCode'
    _name.category_id            refine_ls_class
    _name.object_id              code
    _name.linked_item_id       '_reflns_class.code'
    _type.purpose                Link
    _type.source                 Selected 
    _type.container              Single
    _type.contents               Code
     loop_
    _description_example.case   '1'  'm1'   's2'
     save_
 
 
save_refine_ls_class.d_res_high
    _definition.id             '_refine_ls_class.d_res_high'
     loop_
    _alias.definition_id       '_refine_ls_class_d_res_high'
    _definition.update           2012-11-20
    _description.text
;
     Highest resolution for the reflections in this class.
     This corresponds to the smallest interpanar d value.
;
    _description.common         'LsShellResolHigh'
    _name.category_id            refine_ls_class
    _name.object_id              d_res_high
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms 
     save_
 
 
save_refine_ls_class.d_res_low
    _definition.id             '_refine_ls_class.d_res_low'
     loop_
    _alias.definition_id       '_refine_ls_class_d_res_low'
    _definition.update           2012-11-20
    _description.text
;
     Lowest resolution for the reflections in this class.
     This corresponds to the largest interpanar d value.
;
    _description.common         'LsShellResolLow'
    _name.category_id            refine_ls_class
    _name.object_id              d_res_low
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
    _units.code                  angstroms 
     save_
 
 
save_refine_ls_class.R_factor_all
    _definition.id             '_refine_ls_class.R_factor_all'
     loop_
    _alias.definition_id       '_refine_ls_class_R_factor_all'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor for reflections in this class included in the 
     refinement.  See _refine_ls.R_factor_all definition for details.
;
    _description.common         'LsShellResid(F)AllReflns'
    _name.category_id            refine_ls_class
    _name.object_id              R_factor_all
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls_class.R_factor_gt
    _definition.id             '_refine_ls_class.R_factor_gt'
     loop_
    _alias.definition_id       '_refine_ls_class_R_factor_gt'
                               '_refine_ls_class_R_factor_obs'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor for the reflections in this class judged 
     significantly intense (see _reflns.threshold_expression) and 
     included in refinement. See _refine_ls.R_factor_gt for details.
;
    _description.common         'LsShellResid(F)GtReflns'
    _name.category_id            refine_ls_class
    _name.object_id              R_factor_gt
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls_class.R_Fsqd_factor
    _definition.id             '_refine_ls_class.R_Fsqd_factor'
     loop_
    _alias.definition_id       '_refine_ls_class_R_Fsqd_factor'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor R(F^2^) for reflections in this class judged 
     significantly intense (see _reflns.threshold_expression) and 
     included in refinement. See _refine_ls.R_Fsqd_factor for details.
;
    _description.common         'LsShellResid(Fsqd)GtReflns'
    _name.category_id            refine_ls_class
    _name.object_id              R_Fsqd_factor
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls_class.R_I_factor
    _definition.id             '_refine_ls_class.R_I_factor'
     loop_
    _alias.definition_id       '_refine_ls_class_R_I_factor'
    _definition.update           2012-11-20
    _description.text
;
     Residual factor R(I) for reflections in this class judged 
     significantly intense (see _reflns.threshold_expression) and 
     included in refinement. See _refine_ls.R_I_factor for details.
;
    _description.common         'LsShellResid(I)GtReflns'
    _name.category_id            refine_ls_class
    _name.object_id              R_I_factor
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_
 
 
save_refine_ls_class.wR_factor_all
    _definition.id             '_refine_ls_class.wR_factor_all'
     loop_
    _alias.definition_id       '_refine_ls_class_wR_factor_all'
    _definition.update           2012-11-20
    _description.text
;
     Weight residual for all reflections in this class judged 
     significantly intense (see _reflns.threshold_expression) and 
     included in refinement. See _refine_ls.wR_factor_all for details.
;
    _description.common         'LsShellWResid(F)GtReflns'
    _name.category_id            refine_ls_class
    _name.object_id              wR_factor_all
    _type.purpose                Quantity
    _type.source                 Derived 
    _type.container              Single
    _type.contents               Real
    _enumeration.range           0.0:
     save_

     save_    #------ close REFINE_LS_CLASS category

     save_    #------ close REFINE_LS category

     save_    #------ close REFINE category

     save_    #------ close STRUCTURE category
 
#=============================================================================
#  The dictionary's creation history.
#============================================================================
   
     loop_
    _dictionary_audit.version
    _dictionary_audit.date
    _dictionary_audit.revision
   
     1.1.01   2006-03-07
;
     Initial CORE_STRUCTURE dictionary constructed from CORE_3 v3.5.02
;
     1.1.02   2006-03-22
;
     Insert the _enumeration.def_index_id names and remove the
     _enumeration.default values where present.
;
     1.1.03   2006-06-20
;
     Apply DDL3 3.6.01 attributes.
;
     1.1.04   2006-06-29
;
     Apply DDL3 3.6.05 attributes.
;
     1.1.05   2006-09-07
;
     Apply DDL3 3.6.08 attributes.
;
     1.1.06   2006-11-13
;
     Apply DDL3 3.6.10 attributes.
     Change method.id to method.purpose; EVAL to Evaluation
;
     1.1.07   2006-12-14
;
     Apply DDL3 3.7.01 attributes.
;
     1.2.01   2007-02-07
;
     Apply DDL3 3.7.04 attributes.
;
     1.2.02   2007-02-09
;
     Correct TYPE in _refine_ls.number_parameters and
     _refine_ls.number_reflns
;
     1.2.03   2007-10-13
;
     Placed tags in _category_key.primitive lists within quotes.
;
     1.2.04   2008-01-18
;
     Replaced import_list controls with leading uppercase character.
     Changed import_list [....] to [[....]]
;
     1.2.05   2008-06-18
;
     Change _import_list.id to be ((.....),(....))
     For all *.key items change _type.contents from Code to Inherited
     For other *.id items some _type.purpose from Key to Identify
;
     1.2.06   2008-06-19
;
    Ensure that all items with _type.contents Code are enumerated
    otherwise they are Text.
;
     1.2.07   2008-06-24
;
    Change all _type.dimension values 
;
     1.3.01   2011-06-07
;
   Replace category class "List" with "Loop"
   Replace all "Tuple" with "List"
   Replace all "Array" with "List"
   Place all import lists into [[......]]
;
     1.3.02   2011-07-31
;
   Make all the changes needed with DDL 3.8 and import.get
;
     1.3.03   2011-08-03
;
   Change name of import file com_att.dic to templ_attr.cif
   Change name of import file com_val.dic to templ_templcif
;
     1.3.04   2011-12-01
;
   Change container type from List to Matrix for relevant item definitions
;
     1.3.05   2012-01-25
;
   For import.get change the key "fram" to "save".
;
     1.4.01   2012-05-07
;
   Apply DDL 3.10.01 changes.
;
     1.4.02   2012-10-16
;
   Apply DDL 3.10.02 changes.
   Corrected atom_type.element_symbol -- default link is atom_type.symbol
   Corrected many other definitions   -- default link is atom_type.symbol
   Remove type.contents "Inherited"; insert Definition method expression.
;
     1.4.03   2012-11-20
;
   Invoke container functions Matrix, List in methods scripts where needed.
   Add DDL1 tags as alias.definition_id values
;
     1.4.04   2012-11-30
;
   Add "\" to method expression for _atom_type_scat.hi_ang_Fox_coeffs
   Doug's TEMPORARY FIX!!!!!
;
     1.4.05   2012-12-11
;
   Add method to atom_type_scat.symbol definition.
   Add the Cartn_transform matrix elements & modify matrix method.
   Add the Cartn_transform vector elements.
   Add the fract_transform matrix and the elements.
   Add the fract_transform vector elements.
   Add refine_ls.shift_over_su_max_lt
   Add refine_ls.shift_over_su_mean_lt
;
     1.4.06   2012-12-21
;
  Add alias tag atom_site_aniso_label to atom_site_label definition.
  Add alias tag atom_site_label to atom_site_aniso_label definition.
  Add alias tag atom_type_scat_symbol to atom_type_symbol definition.
  Add alias tag atom_type_symbol to atom_type_scat_symbol definition.
;
     1.4.07   2013-01-21
;
  Additional definitions added for alignment with latest DDL1 core dic.
;
     1.4.08   2013-01-23
;
  Remove cross-aliases between ATOM_SITE and ATOM_SITE_ANISO labels
  Remove incorrect alias for refine_ls.F_calc_formula
;
     1.4.09   2013-01-28
;
  Changed atom_site.symmetry_multiplicity to *.site_symmetry_multiplicity
;
     1.4.10   2013-02-18
;
  Added evaluation method for ATOM_TYPE in case type symbols are missing
;