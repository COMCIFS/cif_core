##############################################################################
#                                                                            #
#          FUNCTIONS USED IN THE CORE DICTIONARIES                           #
#                                                                            #
##############################################################################
 
data_CRY_FUNC
 
    _dictionary.title            CRY_FUNC
    _dictionary.class            Function
    _dictionary.version          1.4.04
    _dictionary.date             2013-04-24
    _dictionary.uri              www.iucr.org/cif/dic/com_func.dic
    _dictionary.ddl_conformance  3.11.04
    _description.text
;
     This dictionary contains the dREL FUNCTIONS used in the
     methods expressions of CIF dictionaries.
;


save_FUNCTION
    _definition.id               FUNCTION
    _definition.scope            Category
    _definition.class            Functions
    _definition.update           2012-12-18
    _description.text
;
    The crystallographic functions the invoked in the definition 
    methods of CORE STRUCTURE data items defined and used with in 
    the Crystallographic Information Framework (CIF).
;
    _name.category_id            CIF_CORE
    _name.object_id              FUNCTION

#============================================================================


save_function.AtomType
    _definition.id              '_function.AtomType'
    _definition.update           2013-04-17
    _description.text
;
     The function   
                   r  =  AtomType( s )

     returns an atom type symbol (element name) from the atom site label.
;
    _name.category_id            function
    _name.object_id              AtomType
    _type.purpose                Encode
    _type.source                 Assigned
    _type.container              Single        
    _type.contents               Code
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     Function AtomType( s :[Single, Code])  {  # atom label
       
        m = Len(s)
        n = 1
        If (m > 1 and s[1] not in '0123456789') n = 2 
        If (m > 2 and s[2]     in '+-'        ) n = 3 
        If (m > 3 and s[3]     in '+-'        ) n = 4 

                 AtomType =  s[0:n]
     }
;
    save_


save_function.Closest
    _definition.id              '_function.Closest'
    _definition.update           2012-10-16
    _description.text
;
     The function   
                   u, d  =  Closest( v, u )

     returns the real coordinate vector U which is the closest cell-
     translated occurence of the vector V to the vector W.  D is the 
     cell translation vector required to move V to U.
;
    _name.category_id            function
    _name.object_id              Closest
    _type.purpose                Number
    _type.source                 Derived 
    _type.container              List
    _type.contents               Matrix(Real,Real,Real)
    _type.dimension              [2]
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     Function Closest( v :[Matrix, Real],   # coord vector to be cell translated
                       w :[Matrix, Real]) { # target vector
 
            d  =  v - w
            t  =  Int( Mod( 99.5 + d, 1.0 ) - d )

            Closest = List ( v+t, t )
     }
;
    save_

  
save_function.SeitzFromJones
    _definition.id              '_function.SeitzFromJones'
    _definition.update           2013-04-24
    _description.text
;
     The function   
                   s  =  SeitzFromJones( j )

     returns a 4x4 Seitz matrix from the Jones faithful representation of
     the equivalent position which is a character string e.g. 1/2+x,-x,z.
;
    _name.category_id            function
    _name.object_id              SeitzFromJones
    _type.purpose                Number 
    _type.source                 Derived 
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [4,4]
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     Function SeitzFromJones( j :[Single, Text])  { # Jones symmetry notation
       
      joneschrs = "123456xyz/,+- " 
      s         = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]] 
      axis      = 0
      sign      = 1
      inum      = 0
  
      do i=0,Len(j)-1    {
          c = j[i]
          If (c not in joneschrs) print 'illegal char in symmetry xyz'

          If      (c == ' ') Next
          If      (c == ',') {
                             axis     += 1
                             inum      = 0
                             sign      = 1
          }
          Else If (c == '+') sign      = +1
          Else If (c == '-') sign      = -1
          Else If (c == 'x') s[axis,0] = sign
          Else If (c == 'y') s[axis,1] = sign
          Else If (c == 'z') s[axis,2] = sign
          Else   {           
               If (inum == 0)   m  = AtoI(c)
               If (inum == 1 and c != '/') print 'illegal num in symmetry xyz'
               If (inum == 2)   {
                                n  = AtoI(c)
                     If(n == 5) print 'illegal translation in symmetry xyz'
                     s[axis,3] = Mod(10.+ Float(sign*m)/Float(n), 1.) 
                     sign      = 1
               }
               inum += 1
       }  }         
                          SeitzFromJones = s
    }
;
    save_

  
save_function.SymEquiv
    _definition.id              '_function.SymEquiv'
    _definition.update           2012-12-14
    _description.text
;
     The function   
                     xyz' =  SymEquiv( symop, xyz )

     returns a fractional coordinate vector xyz' which is input vector
     xyz transformed by the input symop 'n_pqr' applied to the symmetry
     equivalent matrix extracted from the category symmetry_equiv.
;
    _name.category_id            function
    _name.object_id              SymEquiv
    _type.purpose                Number
    _type.source                 Derived 
    _type.container              Matrix      
    _type.contents               Real
    _type.dimension              [3]
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     Function SymEquiv( c :[Single, Symop],    # symop string n_pqr
                        x :[Matrix, Real]   )  # fract coordinate vector
     {
             s = symmetry_equiv [ SymKey( c ) ]
             SymEquiv = s.R * x + s.T + SymLat( c )
     }
;
    save_

  
save_function.SymKey
    _definition.id              '_function.SymKey'
    _definition.update           2012-12-17
    _description.text
;
     The function   
                   m  =  SymKey( s )

     returns an integer index to the Seitz matrices from the character 
     string of the form 'n_pqr'.
;
    _name.category_id            function
    _name.object_id              SymKey
    _type.purpose                Number
    _type.source                 Derived 
    _type.container              Single        
    _type.contents               Index
    _enumeration.range           1:192
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     Function SymKey( s :[Single, Symop])  {  # symop string

            If (s == '.')   n = 1
            Else            n = AtoI(s[0])

                 SymKey =  n       # index from 1
     }
;
    save_

  
save_function.SymLat
    _definition.id              '_function.SymLat'
    _definition.update           2013-03-10
    _description.text
;
     The function   
                   v  =  SymLat( s )

     returns a vector of the cell translations applied to the coordinates
     from the character string of the form 'n_pqr'. i.e. p-5, q-5, r-5.    
;
    _name.category_id            function
    _name.object_id              SymLat
    _type.purpose                Number
    _type.source                 Derived 
    _type.container              Matrix      
    _type.contents               Integer
    _type.dimension              [3]   
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     Function SymLat( s :[Single, Symop])  {  # symop string

##########  If (s[1] == ' ')  v = [ 5, 5, 5 ] 
            If (s[0] == ' ')  v = [ 5, 5, 5 ] 
            Else              v = [ AtoI(s[2]), AtoI(s[3]), AtoI(s[4]) ]

                  SymLat  =  v - 5
     }
;
    save_


save_function.Symop
    _definition.id              '_function.Symop'
    _definition.update           2006-06-30
    _description.text
;
     The function   
                   s  =  Symop( n, t )

     returns a character string of the form 'n_pqr' where n is the 
     symmetry equivalent site number and [p,q,r] is the cell translation 
     vector PLUS [5,5,5]. 
;
    _name.category_id            function
    _name.object_id              Symop
    _type.purpose                Composite
    _type.source                 Derived 
    _type.container              Single        
    _type.contents               Symop
     loop_
    _method.purpose
    _method.expression
     Evaluation
;
     Function Symop( n  :[Single, Integer],   # symmetry equivalent site number
                     t  :[List  , Integer]) { # cell translation vector
 
            d  =  t + 5
         Symop =  `n` + '_' + `d[0]` + `d[1]` + `d[2]`
     }
;
    save_

    save_   #----------- close of FUNCTION category


#=============================================================================
#  The dictionary's creation history.
#============================================================================

    loop_
        _dictionary_audit.version
        _dictionary_audit.date
        _dictionary_audit.revision

     1.1.01   2006-03-07
;
     Initial version of the FUNCTIONS dictionary created from the
     definitions used in CORE_3 dictionary version 3.5.02
;
     1.1.02   2006-06-20
;
     Apply DDL 3.6.04 attributes.
;
     1.1.03   2006-06-30
;
     Apply DDL 3.6.05 attributes.
	 Remove the leading underscore from definition.id value names.
	 Substitute = for <- in expressions.
;
     1.1.04   2006-09-20
;
     Apply DDL 3.6.08 attributes.
;
     1.1.05   2006-11-13
;
     Apply DDL 3.6.10 attributes.
;
     1.1.06   2006-12-14
;
     Apply DDL 3.7.01 attributes.
;
     1.1.07   2008-06-24
;
    Change all _type.dimension values from [..[..]] to [..][..] 
;
     1.1.08   2008-08-13
;
    Change Array([.....]) to Array(.....)
;
     1.3.01   2011-06-07
;
   Replace all "Tuple" with "List"
   Replace all "Array" with "List"
;
     1.3.02   2011-12-01
;
   Change container type from List to Matrix for relevant functions.
;
     1.3.03   2012-05-07
;
   Apply DDL 3.10.01 changes.
;
     1.3.04   2012-10-16
;
   Apply DDL 3.10.02 changes.
;
     1.3.05   2012-12-14
;
   Change the SymEquiv method - put category name symmetry_equiv 
   directly into the method; reduce args to two here and in model dic.
;
     1.3.06   2012-12-18
;
   Add an overarching saveframe and category FUNCTION for functions.
;
     1.3.07   2013-01-25
;
   Insert a leading underscore in the definition.id values.
;
     1.4.01   2013-03-08
;
   Changes arising from alerts issued by ALIGN.
;
     1.4.02   2013-03-10
;
   Made change to SynLat to be compatible with JsCifBrowser
;
     1.4.03   2013-04-16
;
   Changed type.source 'Measured' to 'Recorded'
;
     1.4.04   2013-04-24
;
   Changed type.source 'Quantity' to 'Number' or 'Encode'
   Changed several 'Encode' to 'Composite'
   Removed 'Pairs' from type.contents; replaced with "Real", "Code", etc.
   Changed Float() to Real()
;
